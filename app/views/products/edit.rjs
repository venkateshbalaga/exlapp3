filenameRegExp = '/\.(\w+)$/';
limit = params[:limit] || 50

ext_fields_for(:product, @product) do |f|
page << create_tab_using_ajax_response("Product | #{truncate(@product.name, 20)}") do
%Q`
  /***************
   ** CONSTANTS **
   ***************/
  var formDefaults = { layout: 'form', labelWidth: 50, labelAlign: 'right' };
  var prefix = '#{dom_id(@product)}';
  var form = {url: #{async_update_product_path(:id => @product.id).to_json}, object: 'product'};

  /****************
   ** IMAGES TAB **
   ****************/

  /*************
     FUNCTIONS
   *************/

  /************
     OBJECTS
   ************/
  var imagesStore = new xl.widget.SimpleJSONStore({
    url: #{async_get_image_ids_product_path(:id => @product.id).to_json},
    method: 'get',
    doLoad: true,
    fields: [ {name: 'id'} ]
  }).store;

  var downloadURL = #{download_asset_path(:id => '__ID__').to_json} + '?size=mini';

  var imagesTpl = new Ext.XTemplate(
 		'<tpl for=".">',
      '<div class="thumb-wrap" style="display: inline; padding: 5px;">',
 		    '<div class="thumb" style="display: inline;"><img src="/admin/assets/{id}/download?size=mini" /></div>',
 		  '</div>',
    '</tpl>',
    '<div class="x-clear"></div>'
 	);

  var imageViewerResult = xl.widget.ImageViewer({
    objectId: #{@product.id},
    objectType: 'product',

    imagesUrl: #{async_get_image_ids_product_path(@product).to_json},
    onOrderingSuccess: function(xhr){
      // Cmp is actually this containting panel
      var panel = Ext.getCmp('product_#{@product.id}_img_wrapper_panel');
      var newId = Ext.decode(xhr.responseText);
      var downloadUrl = #{download_asset_path(:id => '__ID__').to_json}.sub('__ID__', newId);
      panel.remove(panel.getComponent(0), true);
      panel.add({ html: '<img src="' + downloadUrl + '?size=small" height="140" />' });
      panel.doLayout();
      panel.render();
    }
  });

  var picturePanel = imageViewerResult[0];
  var picturePanelStore = imageViewerResult[1];

  var imagesPanel = new Ext.Panel({
    title: 'Images',

    tbar: [{
      text: 'Attach image(s)',
      handler: function(button, event) {
        xl.widget.OpenImagePicker({
          showFrom: button.getId(),
          objectId: #{@product.id},
          objectType: 'product',
          mode: 'single',

          thisObjectImagesUrl: #{async_get_image_ids_product_path(@product).to_json},
          allImagesUrl: #{formatted_image_picker_assets_path(:format => :json).to_json},

          updateUrl: #{async_update_product_path(@product).to_json},
          updateAttribute: 'main_image',

          afterUpdate: function(xhr, options, record, allImagesStore) {
            picturePanelStore.reload()

            // Cmp is actually this containting panel
            var panel = Ext.getCmp('product_#{@product.id}_img_wrapper_panel');
            var newId = Ext.decode(xhr.responseText);
            var downloadUrl = #{download_asset_path(:id => '__ID__').to_json}.sub('__ID__', newId);
            panel.remove(panel.getComponent(0), true);
            panel.add({ html: '<img src="' + downloadUrl + '?size=small" height="140" />' });
            panel.doLayout();
            panel.render();
          }
        });
      }
    }],

    items: [picturePanel],
    listeners: {show: function(panel){xl.viewport.render();}}
  });

  /****************
   ** SUPPLY TAB **
   ****************/

  /***************
      FUNCTIONS
   ***************/

  var showNoSuppliersWindow = function(config) {
    var window = new Ext.Window({
      title: 'No Suppliers',
      modal: true,
      width: 250,

      items: [{
       html: '<p>There are no suppliers to link this product to. Would like you like create a supplier in another tab?</p>'
      }],
      buttons: [{
        text: 'Cancel',
        handler: function(button, event) { window.hide(); window.close(); }
      },{
        text: 'Create',
        handler: function(button, event) {
          xl.openNewTabPanel('supplier_new_nil', #{new_supplier_path.to_json});
          window.hide(); window.close();
        }
      }]
    });

    window.show('addSupplierButtonForProduct_#{@product.id}');
  };

  /*************
   ** OBJECTS **
   *************/
  var kDefaultSupplier = {name: 'Supplier Name', id: 0};

  var formPanel = #{f.panel(:layout => :table)};
  var supply_providersRecordAndStore = xl.widget.SimpleJSONStore({
    url: '#{providers_path(:product_id => @product.id)}',
    doLoad: true,
    doSmartMappings: true,
    fields: [
      // supplier_id is called supplier_id instead of just supplier to
      // fool ProvidersController#update, which does receive an id and
      // sets supplier_id. Otherwise, supplier_id is an array
      'id', 'supplier_id', 'name', 'phone', 'email', 'wholesale_price', 'last_po_date', 'sku',
      {name: 'avg_delivery_time', type: 'int'}
    ]
  });

  var supply_providersActionsMenu = new Ext.menu.Menu({});
  var supply_providersGridPanel = new Ext.grid.EditorGridPanel({
    store: supply_providersRecordAndStore.store,
    cm: new Ext.grid.ColumnModel([
      {
        id: "supplier_name",
        header: "Supplier Name",
        dataIndex: "supplier_id",
        sortable: true,
        editor: new Ext.form.ComboBox({
          store: xl.widget.SimpleJSONStore({
            url: #{async_get_formatted_all_suppliers_providers_path.to_json},
            method: 'get',
            doLoad: true, doSmartMappings: true,
            fields: ['id', 'name']
          }).store,
          allowBlank: false,
          trigger: 'all',
          autoComplete: true,
          mode: 'remote',
          displayField: 'name',
          valueField: 'id'
        }),
        renderer: function(value, cell, record) { return value.name; }
      },{
        header: 'SKU',
        dataIndex: 'sku',
        sortable: true,
        editor: new Ext.form.TextField({})
      },{
        header: "Phone",
        dataIndex: "phone",
        sortable: false
      },{
        header: "Email",
        dataIndex: "email",
        sortable: false
      },{
        header: "Wholesale Price",
        dataIndex: "wholesale_price",
        sortable: true,
        editor: new Ext.form.NumberField({allowNegative: false, allowBlank: false})
      },{
        header: "Avg. Delivery Time (Secs)",
        dataIndex: "avg_delivery_time",
        sortable: false
      },{
        header: "Last PO Date",
        dataIndex: "last_po_at",
        sortable: true
      }
    ]),

    tbar: [
      'Providers for this Product',
      {
        text: 'Add Supplier',
        id: 'addSupplierButtonForProduct_#{@product.id}',
        handler : function() {
          var params = {
            'provider[product_id]': #{@product.id},
            'provider[supplier_id]': 0,
            'provider[sku]': 'SKU'
          };

          Ext.Ajax.request({
            url: #{create_provider_path.to_json},
            method: 'post',
            params: params,
            failure: xl.logXHRFailure,
            success: function(xhr) {
              var id = parseInt(Ext.util.JSON.decode(xhr.responseText));
              switch (id) {
                case -1:
                  Ext.MessageBox.alert('Set Supplier First', 'Please set the Supplier on the unedited Provider before making a new Provider');
                break;

                case 0:
                  showNoSuppliersWindow();
                break;

                default:
                  var newRecord = new supply_providersRecordAndStore.record({
                    id: id,
                    sku: 'SKU',
                    supplier_id: kDefaultSupplier
                  });

                  supply_providersRecordAndStore.store.add(newRecord);
                  supply_providersRecordAndStore.store.reload();
                break;
              } // end switch
            } // end success
          });
        }
      }, {
        text: "Actions",
        menu: supply_providersActionsMenu
      }
    ],

    autoScroll: true,
    autoWidth: true
  });

  xl.widget.SetUpdateEventForEditorGridPanel({
    gridPanel: supply_providersGridPanel,
    object: 'provider',
    urlScheme: {
      base: #{update_provider_path(:id => '__ID__').to_json},
      valueEval: "record.get('id');"
    },
    params: { 'product_id': #{@product.id} },
    after: function(editObject) {
      editObject.grid.getStore().load();

      if (editObject.record.get('supplier_id').id == 0) {
        // We got the unset supplier back, so the attempted supplier
        // was already in use
        Ext.MessageBox.alert('Supplier In Use', 'The selected Supplier is in use by another Provider.<br />Please make a different selection or change the other Provider.');
      }
    }
  });

  var dummyData = [];
  var supply_poRecordAndStore = xl.widget.SimpleJSONStore({
    array: dummyData,
    doSmartMappings: true,
    fields: [
      {name: 'id', mapping: 'object_id', type: 'int'},
      'po_number', 'po_date', 'supplier', 'quantity', 'price',
      {name: 'delivery_time_in_seconds', type: 'int'},
      'status'
    ]
  });

  var supply_poGridPanel = new Ext.grid.EditorGridPanel({
    store: supply_poRecordAndStore.store,
    cm: new Ext.grid.ColumnModel([
      {
        header: "PO#",
        dataIndex: "po_number",
        sortable: true,
        editor: new Ext.form.TextField({allowBlank: false})
      },{
        header: "PO Date",
        dataIndex: "phone",
        sortable: true,
        editor: new Ext.form.DateField({format: "d/m/Y"})
      },{
        header: "Supplier",
        dataIndex: "supplier",
        sortable: true,
        editor: new Ext.form.TextField({allowBlank: false})
      },{
        header: "Quantity",
        dataIndex: "quantity",
        sortable: true,
        editor: new Ext.form.NumberField({allowNegative: false, allowBlank: false})
      },{
        header: "Price",
        dataIndex: "price",
        sortable: true,
        editor: new Ext.form.NumberField({allowNegative: false, allowBlank: false})
      },{
        header: "Delivery Time",
        dataIndex: "delivery_time_in_secs",
        sortable: true,
        editor: new Ext.form.NumberField({allowNegative: false, allowBlank: false})
      },{
        header: "Status",
        dataIndex: 'status',
        sortable: true,
        editor: new Ext.form.ComboBox({allowBlank: false, editable: false})
      }
    ]),

    tbar: [
      'Purchase Orders that Include this Product',
      {
        text: 'Create PO for this Product',
        handler : function() { }
      },
      'Actions'
    ],

    autoScroll: true,
    autoWidth: true
  });

  /******************
   ** DISPLAY INFO **
   ******************/
  var displayInfoPanel = new Ext.Panel({
    title: "Display Info."
  });

  /************
   ** LAYOUT **
   ************/
  //var splitBarSystem = xl.widget.SplitBarSystem({prefix: '#{dom_id(@product)}'});

  var mainImagePanel = new Ext.Panel({
    rowspan: 2,

    id: 'product_#{@product.id}_img_wrapper_panel',

    items: [{
      html: #{render_img_tag_or_none(@product.main_image_id).to_json}
    }],
  });

  // set up connection and data store of autocomplete field
  var partyNameAutoCompleteRecord = new Ext.data.Record.create([
    {name: 'display', mapping: 'display'},
    {name: 'name', mapping: 'value'},
    {name: 'id', mapping: 'id'}
  ]);

  var partyNameAutoCompleteReader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, partyNameAutoCompleteRecord)
  var partyNameAutoCompleteConnection = new Ext.data.Connection({url: #{formatted_auto_complete_party_field_listings_path(:format => :json).to_json}, method: 'get'});
  var partyNameAutoCompleteProxy = new Ext.data.HttpProxy(partyNameAutoCompleteConnection)
  var partyNameAutoCompleteStore = new Ext.data.Store({proxy: partyNameAutoCompleteProxy, reader: partyNameAutoCompleteReader});
  
  var ownerAutoCompleteField = xl.widget.InlineActiveField({
    form: form,
    field: {
      type: 'combobox',
      name: "owner_id",
      store: partyNameAutoCompleteStore,
      displayField: 'display',
      valueField: 'id',
      hiddenName: "product[owner_id]",
      fieldLabel: "Owner",
      triggerAction: 'all',
      forceSelection: true,
      emptyText: "Autocomplete field, please start typing",
      hideTrigger:true,
      minChars: 0,
      width: 380,
      allowBlank: true,
      value: #{(@product.owner ? @product.owner.display_name : "").to_json}
    }
  });
  
  var clearOwnerButton = new Ext.Button({
    text: "Clear",
    handler: function(btn){
      Ext.Ajax.request({
        url: form.url,
        params: {"product[owner_id]": ""},
        method: "PUT",
        success: function(){ownerAutoCompleteField.setValue("")}
      });
    }
  });
  
  var ownerLine = new Ext.Panel({
    layout: "column",
    items: [
      {layout: "form", items: ownerAutoCompleteField, width: 500}, 
      {items: clearOwnerButton, width: 100}
    ]
  });

  var upperGeneralPanel = new Ext.Panel({
    id: prefix + '.layout.upperGeneralPanel',
    layout: 'table',
    layoutConfig: { columns: 4 },

    items: [
      {
        xtype: 'fieldset',
        title: 'Identification',
        autoHeight: true,
        labelAlign: 'right',
        labelWidth: 45,
        items: [
          #{f.text_field(:sku, :label => 'SKU')},
          #{f.text_field(:isbn, :label => 'ISBN')},
          #{f.text_field(:upc, :label => 'UPC')},
          #{f.text_field(:rfid, :label => 'RFID')},
          #{f.text_field(:model, :label => 'Model')}
        ]
      },{
        layout: 'form',
        labelAlign: 'right',
        items: [
          #{f.text_field(:name, :width => 200)},
          #{f.text_area(:description, :width => 200)},
          #{f.select(:classification, Product::ValidClassifications, :width => 200)},
          #{f.text_field(:free_period, :width => 200, :value => @product.free_period.to_s)},
          #{f.text_field(:pay_period, :width => 200, :value => @product.pay_period.to_s)},
          #{f.text_field(:external_url, :width => 200, :value => @product.external_url)}
        ]
      },{
        layout: 'form',
        labelAlign: 'right',
        items: [
          xl.widget.InlineActiveField({form: form,  field: {"type": "checkbox", "checked": #{@product.private}, "name": "private", "fieldLabel": "Private"}}),
          #{f.money_field(:wholesale_price, :label => 'Wholesale')},
          #{f.money_field(:retail_price, :label => 'Retail')},
          #{f.number_field(:margin)},
          #{f.integer_field(:in_stock)},
          #{f.integer_field(:on_order)}
        ]
      },
      mainImagePanel,
      {items: [ownerLine], colspan: 4}
    ]
  });

  /////////////////////////////////////// CREATE SETTINGS PANEL ////////////////////////////////////////////

  var disableCommentsCheckbox = new Ext.form.Checkbox({
    fieldLabel: "Disable Commenting",
    name: "disable_comments",
    checked: #{!@product.deactivate_commenting_on.nil?},
    listeners: {
      'check': function(me, checked){
        var parameters = {};
        if(checked) {
          disableCommentsDateField.enable();
          parameters["product[deactivate_commenting_on]"] = disableCommentsDateField.getValue().format("F j, Y");
        }
        else {
          disableCommentsDateField.disable();
          parameters["product[deactivate_commenting_on]"] = false;
        }
        Ext.Ajax.request({
          url: #{async_update_product_path(@product).to_json},
          params: parameters,
          method: "PUT"
        });
      }
    }
  });

  var disableCommentsDateField = new Ext.form.DateField({
    fieldLabel: "on",
    name: "product[deactivate_commenting_on]",
    format: 'F j, Y',
    width: 155,
    allowBlank: true,
    value: #{(@product.deactivate_commenting_on ? @product.deactivate_commenting_on.to_s : Date.today.to_s).to_json},
    disabled: #{@product.deactivate_commenting_on.blank?},
    listeners: {
      change: function(me, newValue, oldValue){
        Ext.Ajax.request({
          url: #{async_update_product_path(@product).to_json},
          params: {"product[deactivate_commenting_on]": newValue.format("F j, Y")},
          method: "PUT"
        });
      }
    }
  });

  var hideCommentsCheckbox = new Ext.form.Checkbox({
    fieldLabel: "Hide Comments",
    name: "hide_comments",
    checked: #{@product.hide_comments.to_json},
    type: 'checkbox',
    listeners: {
      'check': function(me, checked){
        var parameters = {};
        parameters["product[hide_comments]"] = checked

        Ext.Ajax.request({
          url: #{async_update_product_path(@product).to_json},
          params: parameters,
          method: "PUT"
        });
      }
    }
  });

  var approvalMethodSelectionStore = new Ext.data.SimpleStore({
    fields: ['value'],
    data: [['Always approved'], ['Moderated'], ['No Comments']]
  });

  var approvalMethodSelectionField = new Ext.form.ComboBox({
    name: "product[comment_approval_method]",
    displayField: 'value',
    valueField: 'value',
    fieldLabel: 'Comment Approval Method',
    triggerAction: 'all',
    mode: 'local',
    allowBlank: false,
    forceSelection: true,
    editable: false,
    listWidth: 160,
    store: approvalMethodSelectionStore,
    value: #{(@product.read_attribute(:comment_approval_method) || "Moderated").to_json},
    listeners: {'change': function(component, newValue, oldValue){
      var parameters = {};
      parameters["product[comment_approval_method]"] = newValue

      Ext.Ajax.request({
        url: #{async_update_product_path(@product).to_json},
        params: parameters,
        method: "PUT"
      });
    }}
  });

  var settingsPanel = new Ext.Panel({
    title: "Comment Settings",
    layout: 'table',
    layoutConfig: {
      columns: 2
    },
    defaults: {
      layout: 'form'
    },
    items: [{colspan: 2, labelWidth: 130, items:[hideCommentsCheckbox]},
            {colspan: 2, labelWidth: 130, items:[approvalMethodSelectionField]},
            {items:[disableCommentsCheckbox], width: 150, labelWidth: 130}, {width: 250, labelWidth:30, items:[disableCommentsDateField]}]
  });

  /////////////////////////////////////// CREATE GRID PANEL FOR COMMENTS //////////////////////////////////////////

  var commentPath = "#{comment_path(:commentable_type => "Product", :commentable_id => @product.id, :id => "__ID__")}";

  // create file record
  var CommentRecord = new Ext.data.Record.create([
    {name: 'id', mapping: 'id'},
    {name: 'name', mapping: 'name'},
    {name: 'url', mapping: 'url'},
    {name: 'email', mapping: 'email'},
    {name: 'created_at', mapping: 'created_at'},
    {name: 'approved_at', mapping: 'approved_at'},
    {name: 'referrer_url', mapping: 'referrer_url'},
    {name: 'body', mapping: 'body'},
    {name: 'user_agent', mapping: 'user_agent'}
  ]);

  // data reader to parse the json response
  var reader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, CommentRecord);

  // set up connection of the data
  var connection = new Ext.data.Connection({url: #{@formatted_comments_path.to_json}, method: 'get'});
  var proxy = new Ext.data.HttpProxy(connection);

  // set up the data store and then send request to the server
  var ds = new Ext.data.Store({proxy: proxy, reader: reader, remoteSort: true, baseParams: {q: ''}});
  ds.load({params: {start: 0, limit: #{limit}, product_id: #{@product.id} }});

  // set up the ext grid object
  var xg = Ext.grid;

  // define paging toolbar that is going to be appended to the footer of the grid panel
  var paging = new Ext.PagingToolbar({
    store: ds,
    pageSize: #{limit},
    displayInfo: true,
    displayMsg: 'Displaying {0} to {1} of {2}',
    emptyMsg: "No record to display",
    cls: "bottom-toolbar paging-toolbar-bottom",
    plugins: [new Ext.ux.PageSizePlugin]
  });

  #{create_grid_tbar_filter_field}

  #{create_grid_tbar_clear_button}

  var spamStore = new Ext.data.SimpleStore({
    fields: ['display', 'value'],
    data: [['Not spam', 'false'], ['Spam', 'true']]
  });

  var spamSelection = xl.widget.FormField({
    displayField: 'display',
    valueField: 'value',
    hiddenName: 'spam',
    fieldLabel: 'View',
    value: 'false',
    type: 'combobox',
    store: spamStore,
    editable : false,
    triggerAction: 'all',
    mode: 'local',
    width:150,
    listWidth:150
  });

  spamSelection.on('select', function(el, newValue, oldValue){
    ds.baseParams['spam'] = newValue.data.value;
    ds.reload({params: {start: 0, limit: ds.lastOptions.params.limit}});
    if(newValue.data.value == "true"){
      markAsHamAction.enable();
      markAsSpamAction.disable();
    }
    else{
      markAsHamAction.disable();
      markAsSpamAction.enable();
    }
  });

  var selectAllAction = new Ext.Action({
    text: "Select all",
    iconCls: "display_none"
  });

  var clearAllAction = new Ext.Action({
    text: "Clear all",
    iconCls: "display_none",
    disabled: true
  });

  var approveAction = new Ext.Action({
    text: "Approve",
    iconCls: "display_none",
    disabled: true
  });

  var unapproveAction = new Ext.Action({
    text: "Unapprove",
    iconCls: "display_none",
    disabled: true
  });

  var deleteAction = new Ext.Action({
    text: "Delete",
    iconCls: "display_none",
    disabled: true
  });

  var markAsHamCheckboxField = new Ext.form.Checkbox({
    fieldLabel: "Approve comment as well?",
    labelSeparator: " ",
    name: "approve"
  });

  var markAsHamFormPanel = new Ext.form.FormPanel({
    labelWidth: 150,
    items: [markAsHamCheckboxField]
  });

  var markAsHamWindow = new Ext.Window({
    title: "Mark as Not Spam",
    resizable: false,
    width: 300,
    height: 92,
    items: [markAsHamFormPanel],
    buttons:[
        {
          text: "OK",
          handler: function() {
              var records = commentsGrid.getSelectionModel().getSelections();
              var params = {};
              params['ids'] = getSelectedIdsString(records);
              markAsHamFormPanel.getForm().doAction("submit",
                {
                  url: #{mark_as_ham_comments_path().to_json},
                  method: "POST",
                  params: params
                }
              )
              if(markAsHamFormPanel.getForm().isValid()) {
                commentsGrid.enable();
                markAsHamWindow.hide();
                markAsHamWindow.close();
              }
            }
        },
        {
          text: 'Cancel',
          handler: function() { commentsGrid.enable(); markAsHamWindow.hide(); markAsHamWindow.close(); }
        }
      ]
  });

  var markAsHamAction = new Ext.Action({
    text: "Mark as Not Spam",
    iconCls: "display_none",
    disabled: true,
    handler: function() {
      commentsGrid.disable();
      markAsHamWindow.show();
    }
  });

  var markAsSpamAction = new Ext.Action({
    text: "Mark as Spam",
    iconCls: "display_none",
    disabled: false,
    handler: function() {
      var records = commentsGrid.getSelectionModel().getSelections();
      Ext.Msg.confirm("", "Mark selected comment(s) as spam?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        params['ids'] = getSelectedIdsString(records);
        new Ajax.Request(#{mark_as_spam_comments_path.to_json}, {
          method: 'post',
          parameters: params
        });
      }
    });
    }
  });

  var selectionMenu =  new Ext.menu.Menu({
    items: [selectAllAction, clearAllAction]
  });

  selectionMenu.addSeparator();
  selectionMenu.add(approveAction, unapproveAction, markAsHamAction, markAsSpamAction);
  selectionMenu.addSeparator();
  selectionMenu.add(deleteAction);

  var gridTopToolbar = new Ext.Toolbar({
    cls: "top-toolbar",
    items: [
      {
        text: "New Comment",
        handler: function(btn, event){
          Ext.Ajax.request({
            url: #{new_comment_path(:commentable_type => "Product", :commentable_id => @product.id).to_json}.replace("&amp;", "&")
          });
        }
      },
      {text: "&nbsp;&nbsp;&nbsp;Status:"},
      spamSelection,
      {text: "#{'&nbsp;'*60}Filter: "},
      filterField,
      clearButton,
      { text: "Actions", menu: selectionMenu }]
  });

  var editRenderer = function(value, cell, record) {
    return '<div class="icon_pencilGo pointerOnHover"/>';
  };

  var commentsGrid = new Ext.grid.GridPanel({
      store: ds,
      title: "Comments Grid",
      cm: new Ext.grid.ColumnModel([
          {id: "edit", width: 35, dataIndex: 'id', renderer: editRenderer, sortable: false, menuDisabled: true, hideable: false, tooltip: "Click here to go to full edit mode" },
          {id: "comment-name", width: 175, header: "Name", sortable: true, dataIndex: 'name', editor: new Ext.form.TextField()},
          {id: "comment-email", width: 150, header: "Email", sortable: true, dataIndex: 'email'},
          {id: "comment-body", header: "Body", sortable: true, dataIndex: 'body'},
          {id: "comment-url", width: 200, header: "URL", sortable: true, dataIndex: 'url'},
          {id: "comment-approved_at", width: 100, header: "Approved at", sortable: true, dataIndex: 'approved_at'},
          {id: "comment-created_at", width: 100, header: "Created at", sortable: true, dataIndex: 'created_at'},
          {id: "comment-referrer_url", width: 100, header: "Referrer url", hidden: true, sortable: true, dataIndex: 'referrer_url'},
          {id: "comment-user_agent", width: 100, header: "User agent", sortable: true, hidden: true, dataIndex: 'user_agent'}
        ]),
      autoScroll: true,
      width: "100%",
      tbar: gridTopToolbar,
      bbar: paging,
      selModel: new Ext.grid.RowSelectionModel,
      viewConfig: {autoFill: true, forceFit: true},
      autoExpandColumn: "comment-body",
      height: #{get_default_grid_height(nil)}-111,
      loadMask: true
  });

  commentsGrid.doNotSyncSize = true;
  Ext.EventManager.onWindowResize(function() {commentsGrid.setWidth(xl.centerPanel.getInnerWidth());});
  Ext.EventManager.onWindowResize(function() {commentsGrid.setHeight(xl.centerPanel.getInnerHeight());});

  var commentsPanel = new Ext.Panel({
    title: "Comments",
    items: [settingsPanel, commentsGrid],
    listeners: {show: function(panel){xl.viewport.render();}}
  });

  #{render_tags_panel("product[tag_list]", @product, current_account.products.tags, {}, {:collapsible => false, :title => "Tags"})}
  var webCopyField = xl.widget.InlineActiveField({
    form: form,
    field: {
      name: "web_copy",
      type: "htmleditor",
      value: #{@product.web_copy.to_json},
      listeners: {
        render: function(component){
          xl.fitToOwnerCtWidth(component); 
          component.getEl().setHeight(200);
          component.getToolbar().insertButton(16, #{html_editor_image_video_embed_button(@product)});
      },
        resize: function(cpt){xl.fitToOwnerCtWidth(cpt)}
      }
    }
  });

  var webCopyPanel = new Ext.Panel({
    title: "Web copy",
    items: webCopyField
  });

  var lowerGeneralPanel = new Ext.Panel({
    layout: "column",
    items: [
      {columnWidth: .65, items: webCopyPanel},
      {columnWidth: .01, items: [{html:"&nbsp;"}]},
      {columnWidth: .3, items: tagsPanel}
    ]
  });

  var generalPanel = new Ext.Panel({
    items:[upperGeneralPanel, lowerGeneralPanel]
  });

  #{self.initialize_delivery_panel}

  var freeAccessRootTreeNode =  new Ext.tree.AsyncTreeNode({
    text: "Group - Root",
    expanded: true,
    id: 0
  });

  var freeAccessGroupsTreePanel = new Ext.tree.TreePanel({
    title: "Free Access for Selected Groups",
    root: freeAccessRootTreeNode,
    rootVisible: false,
    autoScroll: true,
    loader: new Ext.tree.TreeLoader({
      requestMethod: "GET",
      url: #{formatted_product_grants_path(:format => :json, :type => "Group", :product_id => @product.id).gsub("&amp;", "&").to_json},
      baseAttrs: {uiProvider: Ext.tree.TreeCheckNodeUI}
    }),
    listeners: {
        check: function(node, checked){
          var params = {product_id: #{@product.id}, object_type: "Group"};
          var method = null;
          var url = null;
          if(checked){
            url = #{product_grants_path.to_json};
            method = "POST"
            params.object_id = node.id;
          }
          else{
            url = #{destroy_collection_product_grants_path.to_json}
            method = "DELETE";
            params.object_ids = node.id;
          }
          Ext.Ajax.request({
            url: url,
            method: method,
            params: params
          });
        },
        render: function(cpt){
          cpt.setHeight(cpt.ownerCt.ownerCt.getSize().height);
        }
      }
  });
  
  ///////////////////////////////////////////////AFFILIATE TAB///////////////////////////////////////////////////////

  var affiliateSimpleStoreWidget = xl.widget.SimpleJSONStore({
    url:#{@affiliate_setup_lines_product_path.to_json}
    ,fields:[
      {name:"id", type:"int"}
      ,{name:"level", type:"int"}
      ,{name:"percentage", type:"float"}
    ]
  });

  var affiliateProductStore = affiliateSimpleStoreWidget.store;
  var AffiliateSetupLineRecord = affiliateSimpleStoreWidget.record;
  
  var addAffiliateSetupLine = function(){
    var level = 1;
    if(affiliateProductStore.getCount()>0){
      level = affiliateProductStore.getAt(affiliateProductStore.getCount()-1).get("level") + 1;
    };
    var newAffiliateSetupLine = new AffiliateSetupLineRecord({
      id:""
      ,level:level
      ,percentage:0
    });
    affiliateSetupGrid.stopEditing();
    affiliateProductStore.insert(affiliateProductStore.getCount(), newAffiliateSetupLine);
    affiliateSetupGrid.startEditing(affiliateProductStore.getCount()-1, 1);
  };
  
  var removeAffiliateSetupLines = function(){
    if(affiliateSetupGrid.getSelectionModel().hasSelection()){
      Ext.Msg.confirm("Deleting affiliate setup line", "Are you sure?", function(btn){
        if(btn=="yes"){
          var selectedRecord = affiliateSetupGrid.getStore().getAt(affiliateSetupGrid.getSelectionModel().getSelectedCell()[0]);
          Ext.Ajax.request({
            url:#{@destroy_collection_affiliate_setup_lines_path.to_json}
            ,method:"DELETE"
            ,params:{"ids":selectedRecord.get("id"), "target_type":"Product", "target_id":#{@product.id}}
            ,success:function(response, options){
              affiliateSetupGrid.getStore().reload()
            }
          });
          console.log("btn is %o", btn);
        }
      });
    }
  };
  
  var affiliateSetupGrid = new Ext.grid.EditorGridPanel({
    store:affiliateProductStore
    ,tbar:[
      {text:"New", handler:addAffiliateSetupLine}
      ,{text:"Remove", handler:removeAffiliateSetupLines}
    ]
    ,cm:new Ext.grid.ColumnModel([
      {header:"Level", width:50, dataIndex:"level", sortable:false}
      ,{header:"Percentage", width:100, dataIndex:"percentage", sortable:false, editor:new Ext.form.NumberField()}
    ])
    ,listeners:{"render":function(){affiliateProductStore.load()}}
    ,height:300
    ,width:200
  });

  var affiliateSetupLineProductPath = #{@affiliate_setup_line_product_path.to_json};
  affiliateSetupGrid.on("validateedit", function(event){
    var record = event.record;
    var editedFieldName = event.field;

    record.set(editedFieldName, event.value);
    var objectId = record.get("id");
    
    if(objectId == ""){
      Ext.Ajax.request({
        url:#{@affiliate_setup_lines_product_path.to_json}
        ,method:"POST"
        ,params:{"line[percentage]":record.get("percentage")}
        ,success:function(response, options){
          affiliateSetupGrid.getStore().reload()
        }
      });
    }
    else{
      Ext.Ajax.request({
        url:affiliateSetupLineProductPath.sub("__ID__", objectId)
        ,method:"PUT"
        ,params:{"line[percentage]":record.get("percentage")}
        ,success:function(response, options){
          affiliateSetupGrid.getStore().reload()
        }
      })
    }
    return true;
  });

  var affiliateSetupPanel = new Ext.Panel({
    title:"Affiliate"
    ,items:[affiliateSetupGrid]
    ,listeners: {show: function(panel){xl.viewport.render();}}
  });
  
  /////////////////////////////////////////////END AFFILIATE TAB/////////////////////////////////////////////////////


  var tabPanel = new Ext.TabPanel({
    style: 'padding: 10px;',
    activeTab: 0,
    defaults: { cls: 'border2pxLightGreen', autoScroll: true },
    tabPosition: 'bottom',
    border: false, bodyBoder: false, frame: false,

    items: [
      {
        title: "General",
        items: [generalPanel],
        listeners: {show: function(panel){xl.viewport.render();}}
      },{
        title: 'Display Info',
        autoScroll: true,
        autoLoad: {url:#{display_info_product_path(@product).to_json}, scripts:true},
        listeners: {show: function(panel){xl.viewport.render();}}
      },/*
      {
        title: 'Discounts',
        autoScroll: true,
        autoLoad: { scripts: true, url: #{discounts_product_path(@product).to_json} },
        listeners: {show: function(panel){xl.viewport.render();}}
      },{
        title: 'Supply',
        layout: 'ux.rowfit',
        items: [
          supply_providersGridPanel,
          supply_poGridPanel
        ],
        listeners: {show: function(panel){xl.viewport.render();}}
      },*/
      imagesPanel,
      commentsPanel,
      {
        title: "Delivery",
        items: deliveryPanel,
        listeners: {show: function(panel){xl.viewport.render();}}
      },
      {
        title: "Free Access",
        items: freeAccessGroupsTreePanel,
        listeners: {show: function(panel){xl.viewport.render();}}
      },
      affiliateSetupPanel
    ]
  });

  newPanel.add(tabPanel);

  xl.runningGrids.set("comments_Product_#{@product.id}", commentsGrid);
  tabPanel.on("destroy", function(){
    xl.runningGrids.unset("comments_Product_#{@product.id}");
  });

  var editCommentUrl = #{@edit_comment_path.to_json};
  // set double click action on grid cells
  commentsGrid.on("cellclick", function(gr, rowIndex, columnIndex, e) {
    var record = ds.getAt(rowIndex);
    var id = record.data.id;

    switch(columnIndex){
      case commentsGrid.getColumnModel().getIndexById("edit"):
        xl.openNewTabPanel('comments_edit_'+id, editCommentUrl.sub("__ID__", id));
        break;
      default:
        break;
    }
  });

  function alertNoPostsSelected() {
    Ext.Msg.alert('No comments Selected', 'Please select one or more comments to perform that action.');
  }

  function getSelectedIdsString(records){
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id);
    });
    return ids.toString()
  }

  clearAllAction.setHandler(function(e) {
    commentsGrid.getSelectionModel().clearSelections();
    e.disable();
  });

  selectAllAction.setHandler(function(e) {
    commentsGrid.getSelectionModel().selectAll();
    e.disable();
  });

  deleteAction.setHandler(function(e) {
    var records = commentsGrid.getSelectionModel().getSelections();
    if (records.length == 0) {
      alertNoPostsSelected();
      return false;
    }

    Ext.Msg.confirm("", "Delete selected comments permanently?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        commentsGrid.disable();
        params['commentable_type'] = 'Product';
        params['commentable_id'] = #{@product.id};
        params['ids'] = getSelectedIdsString(records);
        new Ajax.Request("#{destroy_collection_comments_path}", {
          method: 'post',
          parameters: params,
          onSuccess: function(transport){
            commentsGrid.enable();
          }
        });
      }
    });
  });

  approveAction.setHandler(function(e) {
    var records = commentsGrid.getSelectionModel().getSelections();
    if (records.length == 0) {
      alertNoPostsSelected();
      return false;
    }

    Ext.Msg.confirm("", "Approved selected comments?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        commentsGrid.disable();
        params['commentable_type'] = 'Product';
        params['commentable_id'] = #{@product.id};
        params['ids'] = getSelectedIdsString(records);
        new Ajax.Request("#{approve_collection_comments_path}", {
          method: 'post',
          parameters: params,
          onSuccess: function(transport){
            commentsGrid.enable();
          }
        });
      }
    });
  });

  unapproveAction.setHandler(function(e) {
    var records = commentsGrid.getSelectionModel().getSelections();
    if (records.length == 0) {
      alertNoPostsSelected();
      return false;
    }

    Ext.Msg.confirm("", "Unapproved selected comments?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        commentsGrid.disable();
        params['commentable_type'] = 'Product';
        params['commentable_id'] = #{@product.id};
        params['ids'] = getSelectedIdsString(records);
        new Ajax.Request("#{unapprove_collection_comments_path}", {
          method: 'post',
          parameters: params,
          onSuccess: function(transport){
            commentsGrid.enable();
          }
        });
      }
    });
  });

  commentsGrid.getSelectionModel().on("selectionchange", function(){
    records = commentsGrid.getSelectionModel().getSelections();
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id);
    });

    if(ids.length>0){
      clearAllAction.enable();
      approveAction.enable();
      unapproveAction.enable();
      deleteAction.enable();
    }
    else {
      deleteAction.disable();
      approveAction.disable();
      unapproveAction.disable();
      selectAllAction.enable();
    }
  });

  var _afterRenderCallback = function() {
    supply_providersActionsMenu.add(
      xl.widget.DeleteSelectedAction({
        gridPanel: supply_providersGridPanel,
        object: 'providers',
        url: #{destroy_collection_providers_path.to_json}
      })
    );
  }
`
end

page << %Q`
  /*Event.observe(#{typed_dom_id(@product, :wholesale_price, :field).to_json}, 'change', function() {
    calculateMarginPercentage(#{typed_dom_id(@product, :retail_price, :field).to_json}, #{typed_dom_id(@product, :wholesale_price, :field).to_json}, #{typed_dom_id(@product, :margin).to_json});
  });

  Event.observe(#{typed_dom_id(@product, :retail_price, :field).to_json}, 'change', function() {
    calculateMarginPercentage(#{typed_dom_id(@product, :retail_price, :field).to_json}, #{typed_dom_id(@product, :wholesale_price, :field).to_json}, #{typed_dom_id(@product, :margin).to_json});
  });*/

`
end
