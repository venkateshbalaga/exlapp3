limit = params[:limit] || 50
products_url_json = formatted_products_path(:format => :json).to_json

after_render = %Q`
  ds.load({params: {start: 0, limit: #{limit} }});
`

page << create_tab_using_ajax_response("Products", after_render) do
%Q`
  var selectedIds = null;

  // create file record
  var ProductRecord = new Ext.data.Record.create([
    {name: 'id', mapping: 'object_id'},
    {name: 'name', mapping: 'name'},
    {name: 'most_recent_supplier_name', mapping: 'most_recent_supplier_name'},
    {name: 'in_stock', mapping: 'in_stock'},
    {name: 'on_order', mapping: 'on_order'},
    {name: 'sold_to_date', mapping: 'sold_to_date'},
    {name: 'wholesale_price_cents', mapping: 'wholesale_price'},
    {name: 'retail_price_cents', mapping: 'retail_price'},
    {name: 'margin', mapping: 'margin'}
  ]);

  // data reader to parse the json response
  var reader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, ProductRecord);

  // set up connection of the data
  var connection = new Ext.data.Connection({url: #{products_url_json}, method: 'get'});
  var proxy = new Ext.data.HttpProxy(connection);

  // set up the data store and then send request to the server
  var ds = new Ext.data.Store({proxy: proxy, reader: reader, remoteSort: true, baseParams: {q: ''}});

  // set up the ext grid object
  var xg = Ext.grid;

  // define paging toolbar that is going to be appended to the footer of the grid panel
  var paging = new Ext.PagingToolbar({
    store: ds,
    pageSize: #{limit},
    displayInfo: true,
    displayMsg: 'Displaying {0} to {1} of {2}',
    emptyMsg: "No record to display",
    cls: "bottom-toolbar paging-toolbar-bottom",
    plugins: [new Ext.ux.PageSizePlugin]
  });

  // selection fields of [Internal ISBN Model Sku UPC]
  var idSelection = #{render_ids_selection_field.to_json};
  
  var filterByStore = new Ext.data.SimpleStore({
    fields: ['display', 'value'],
    data: #{([['All', 'all'], ['No Categories', 0]] + current_account.product_categories.find(:all, :order => :name).map{|g|[g.name, g.id]}).to_json}
  });
  
  var filterBySelection = new Ext.form.ComboBox({
    hiddenName: 'filter_by',
    displayField: 'display', 
    valueField: 'value',
    fieldLabel: 'Filter By',
    emptyText: 'Product Category',
    autoWidth:true,
    store: filterByStore, 
    editable : false,
    triggerAction: 'all',
    mode: 'local',
    listeners: {
      'select': function(me, record, index){
        ds.baseParams['q'] = filterField.getValue();
        ds.baseParams['product_category_id'] = record.data.value;
        ds.reload({params: {start: 0, limit: ds.lastOptions.params.limit}});
      }
    }
  });
  
  #{create_grid_tbar_filter_field}
  
  #{create_grid_tbar_clear_button}

  var gridTopToolbar = new Ext.Toolbar({
    cls: "top-toolbar",
    items: [
      {text:"New", handler:function(){xl.openNewTabPanel('products_new_nil', #{new_product_path.to_json})}},
      {xtype:"tbtext", text: "Filter By: " },
      filterBySelection,
      { text: ""}, 
      idSelection, 
      {text:"&nbsp;&nbsp;&nbsp;Filter: "}, 
      filterField, 
      clearButton
    ]
  });

  // create GridPanel object
  var grid = new Ext.grid.GridPanel({
    store: ds,
    cm: new xg.ColumnModel([
        {header: "ID", width: 100, sortable: false, dataIndex: 'id'},
        {header: "Name", width: 150, sortable: true, dataIndex: 'name'},
        {header: "Most Recent Supplier", width: 150, sortable: true, dataIndex: 'most_recent_supplier_name'},
        {header: "In Stock", width: 55, sortable: true, dataIndex: 'in_stock'},
        {header: "On Order", width: 55, sortable: true, dataIndex: 'on_order'},
        {header: "Sold to Date", width: 75, sortable: true, dataIndex: 'sold_to_date'},
        {header: "Wholesale Price", width: 90, sortable: true, dataIndex: 'wholesale_price_cents'},
        {header: "Retail Price", width: 90, sortable: true, dataIndex: 'retail_price_cents'},
        {header: "Margin", width: 50, sortable: true, dataIndex: 'margin'}
      ]),
    viewConfig: {
      forceFit: false
    },
    autoScroll: true,
    autoWidth: true,
    height: #{get_default_grid_height(nil)},
    tbar: gridTopToolbar,
    bbar: paging,
    footer: true,
    loadMask: true,
    iconCls: 'icon-grid'
  });

  newPanel.add(grid);
  xl.runningGrids.set("products", grid);
  newPanel.on("destroy", function(){
    xl.runningGrids.unset("products");
  });

  var editProductUrl = #{edit_product_path(:id => "__ID__").to_json};
  // set double click action on grid cells
  grid.on("celldblclick", function(gr, rowIndex, columnIndex, e) {
    var record = ds.getAt(rowIndex);
    var id = record.data.id.split("_").last();

    switch(columnIndex){
      default:
        xl.openNewTabPanel(('products_edit_'+id), editProductUrl.sub("__ID__", id));
    }
  });

  var selectAllAction = new Ext.Action({
    text: "Select all",
    iconCls: "display_none"
  });

  var clearAllAction = new Ext.Action({
    text: "Clear all",
    iconCls: "display_none",
    disabled: true
  });

  var addToCategoryAction = new Ext.Action({
    text: "Add to Category",
    iconCls: "display_none",
    disabled: true
  });

  var addToSaleAction = new Ext.Action({
    text: "Add to Sale",
    iconCls: "display_none",
    disabled: true
  });

  var createSnippetAction = new Ext.Action({
    text: "Create Snippet(s)",
    iconCls: "display_none",
    disabled: true
  });

  // moving from one shelf to another
  var changeStorageAction = new Ext.Action({
    text: "Change Storage",
    iconCls: "display_none",
    disabled: true
  });

  var createPurchaseOrderAction = new Ext.Action({
    text: "Create PO(s)",
    iconCls: "display_none",
    disabled: true
  });

  var duplicateAction = new Ext.Action({
    text: "Duplicate",
    iconCls: "display_none",
    disabled: true
  });

  var printSummaryAction = new Ext.Action({
    text: "Print Summary",
    iconCls: "display_none",
    disabled: true
  });

  var setMarginAction = new Ext.Action({
    text: "Set Margin",
    iconCls: "display_none",
    disabled: true
  });

  var tagAction = new Ext.Action({
    text: "Tag...",
    iconCls: "display_none",
    disabled: true
  });
  
  var embedCodeAction = new Ext.Action({
    text: "<img src='' id='product_embed_image' style='display:none'/>Embed code",
    iconCls: "display_none",
    disabled: true
  });

  var deleteAction = new Ext.Action({
    text: "Delete",
    iconCls: "display_none",
    disabled: true
  });

  var expandAllAction = new Ext.Action({
    text: "Expand all",
    disabled: true
  });

  var collapseAllAction = new Ext.Action({
    text: "Collapse all",
    disabled: true
  });

  var selectionMenu =  new Ext.menu.Menu({
    items: [selectAllAction, clearAllAction]
  });
  selectionMenu.addSeparator();
  selectionMenu.add(addToCategoryAction, addToSaleAction, createSnippetAction, changeStorageAction, 
                    createPurchaseOrderAction, duplicateAction, embedCodeAction, printSummaryAction, setMarginAction, tagAction);
  selectionMenu.addSeparator();
  selectionMenu.add(deleteAction);

  xl.viewport.render();
  grid.getTopToolbar().add({ text: "Actions", menu: selectionMenu });
  grid.getTopToolbar().add(expandAllAction, collapseAllAction, #{render_measurement_units_selection_field.to_json});

  clearAllAction.setHandler(function(e) {
    grid.getSelectionModel().clearSelections();
    selectedIds = [];
    e.disable();
  });

  selectAllAction.setHandler(function(e) {
    grid.getSelectionModel().selectAll();
    e.disable();
  });

  deleteAction.setHandler(function(e) {
    Ext.Msg.confirm("", "Delete selected products permanently?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        params['ids'] = selectedIds.toString();
        new Ajax.Request(#{destroy_collection_products_path.to_json}, {
          method: 'post',
          parameters: params
        });
      }
    });
  });

  var processEmbed = function(buttonId, text){
    if(buttonId == "yes"){
      xl.widget.OpenSingleImagePicker('product_embed_image', #{formatted_image_picker_assets_path(:format => :json).to_json}, "Product", 0, {
        windowTitle: "Please select your avatar...",
        beforeSelect: function(window){
          window.el.mask("Processing...");
        },
        afterSelect: function(selectedRecord, window){
          Ext.Ajax.request({url: '/admin/products/'+selectedIds.first()+'/embed_code?asset_id='+selectedRecord.get("id"),method: 'GET'});

          window.el.unmask();
          window.hide();
        },
        afterUpload: function(window){
          window.el.unmask();
          window.hide();
        },
        uploadCallback: function(asset_id, asset_download_path){
          Ext.Ajax.request({url: '/admin/products/'+selectedIds.first()+'/embed_code?asset_id='+asset_id,method: 'GET'});
        }
      });
    }else{
      Ext.Ajax.request({url: '/admin/products/'+selectedIds.first()+'/embed_code', method: 'GET'});
    }
  };

  var embedCodeProductPath = #{embed_code_product_path(:id => "__ID__").to_json};
  embedCodeAction.setHandler(function(e) {
    var selectedId = selectedIds.first();
    Ext.Msg.show({
      title: "Use an image in the file manager?",
      msg: "Do you want to use an image in the file manager?",
      buttons: Ext.Msg.YESNO,
      fn: processEmbed
    });
  });

  tagAction.setHandler(function(e) {
    Ext.Msg.prompt("Please input tag", "", function(btn, text){
      if ( btn.match(new RegExp("ok","i")) ) {
        var params = {};
        params['ids'] = selectedIds.toString();
        params['tag_list'] = text;
        new Ajax.Request(#{tagged_collection_products_path.to_json}, {
          method: 'post',
          parameters: params
        });
      }
    });
  });

  grid.getSelectionModel().on("selectionchange", function(){
    records = grid.getSelectionModel().getSelections();
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id.split("_").last());
    });
    selectedIds = ids;

    if(ids.length>0){
      selectionMenu.items.each(function(e) {e.enable();});
      addToCategoryAction.disable();
      addToSaleAction.disable();
      createSnippetAction.disable();
      changeStorageAction.disable();
      createPurchaseOrderAction.disable();
      duplicateAction.disable();
      printSummaryAction.disable();
      setMarginAction.disable();
    }
    else{
      selectionMenu.items.each(function(e) {e.disable();});
      selectAllAction.enable();
    }
  });
`
end
