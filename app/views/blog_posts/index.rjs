limit = params[:limit] || 50
blog_posts_url_json = formatted_blog_posts_path(:format => :json).to_json

after_render = %Q`
  ds.load({params: {start: 0, limit: #{limit} }});
`

page << create_tab_using_ajax_response("Posts | Index", after_render) do
%Q`
  var blogPostPath = #{blog_post_path("__ID__").to_json};
  
  // create file record
  var BlogPostRecord = new Ext.data.Record.create([
    {name: 'id', mapping: 'id'},
    {name: 'title', mapping: 'title'},
    {name: 'excerpt', mapping: 'excerpt'},
    {name: 'body', mapping: 'body'},
    {name: 'comments_count', mapping: 'comments_count'},
    {name: 'unapproved_comments_count', mapping: 'unapproved_comments_count'},
    {name: 'author_name', mapping: 'author_name'},
    {name: 'author_id', mapping: 'author_id'},
    {name: 'published_at', mapping: 'published_at'},
    {name: 'created_at', mapping: 'created_at'},
    {name: 'spam_comments_count', mapping: 'spam_comments_count'}
  ]);
  
  // data reader to parse the json response
  var reader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, BlogPostRecord);

  // set up connection of the data
  var connection = new Ext.data.Connection({url: #{blog_posts_url_json}, method: 'get'});
  var proxy = new Ext.data.HttpProxy(connection);

  // set up the data store and then send request to the server
  var ds = new Ext.data.Store({proxy: proxy, reader: reader, remoteSort: true, baseParams: {q: ''}});

  // set up the ext grid object
  var xg = Ext.grid;

  // define paging toolbar that is going to be appended to the footer of the grid panel
  var paging = new Ext.PagingToolbar({
    store: ds,
    pageSize: #{limit},
    displayInfo: true,
    displayMsg: 'Displaying {0} to {1} of {2}',
    emptyMsg: "No record to display",
    cls: "bottom-toolbar paging-toolbar-bottom",
    plugins: [new Ext.ux.PageSizePlugin]
  });
  
  #{create_grid_tbar_filter_field}
  
  #{create_grid_tbar_clear_button}

  var newPostButton = new Ext.Toolbar.Button({
    text:"New"
    ,handler:function(){
      xl.openNewTabPanel('blog_posts_new_nil', #{new_blog_post_path.to_json})
    }
  });

  var gridTopToolbar = new Ext.Toolbar({
    cls: "top-toolbar",
    items: [{xtype:"tbtext", text:"&nbsp;&nbsp;&nbsp;Filter: "}, filterField, clearButton]
  });
  
  var editRenderer = function(value, cell, record) {
    return '<div class="icon_pencilGo pointerOnHover"/>';
  };
  
  var grid = new Ext.grid.EditorGridPanel({
    store: ds,
    cm: new Ext.grid.ColumnModel([
        {id: "edit", width: 10, dataIndex: 'id', renderer: editRenderer, sortable: false, menuDisabled: true, hideable: false, tooltip: "Click here to go to full edit mode" },
        {id: "blog-post-title", header: "Title", sortable: true, dataIndex: 'title', editor: new Ext.form.TextField()},
        {id: "blog-post-author_name", width: 50, header: "Author name", sortable: true, dataIndex: 'author_name'},
        {id: "blog-post-excerpt", header: "Excerpt", sortable: true, dataIndex: 'excerpt'},
        {id: "blog-post-comments_count", header: "Comments", dataIndex: 'comments_count', width: 20, hidden: true},
        {id: "blog-post-created_at", width: 80, header: "Created at", sortable: true, dataIndex: 'created_at'},
        {id: "blog-post-published_at", width: 80, header: "Published at", sortable: true, dataIndex: 'published_at'},
        {id: "blog-post-unapproved_comments_count", header: "Unapproved comments", dataIndex: 'unapproved_comments_count', width: 35},
        {id: "blog-post-spam_comments_count", header: "Spam", dataIndex: 'spam_comments_count', width: 35}
      ]),
    autoScroll: true,
    autoWidth: true,
    height: #{get_default_grid_height(nil)},
    clicksToEdit:1,
    tbar: gridTopToolbar, 
    bbar: paging,
    selModel: new Ext.grid.RowSelectionModel,
    loadMask: true,
    viewConfig: { autoFill: true, forceFit: true}
  });
  
  newPanel.add(grid);
  xl.runningGrids.set("blog_posts", grid);
  newPanel.on("destroy", function(){
    xl.runningGrids.unset("blog_posts");
  });
  
  var editPostUrl = #{edit_blog_post_path(:id => "__ID__").to_json};
  // set double click action on grid cells
  grid.on("cellclick", function(gr, rowIndex, columnIndex, e) {
    var record = ds.getAt(rowIndex);
    var id = record.data.id;

    switch(columnIndex){
      case grid.getColumnModel().getIndexById("edit"):
        xl.openNewTabPanel('blog_posts_edit_'+id, editPostUrl.sub("__ID__", id));
        break;
      default:
        break;
    }
  });

  grid.on("celldblclick", function(gr, rowIndex, columnIndex, e){
    var record = ds.getAt(rowIndex);
    var id = record.data.id;

    switch(columnIndex){
      case grid.getColumnModel().getIndexById("blog-post-unapproved_comments_count"):
        xl.openNewTabPanel('blog_posts_edit_'+id, editPostUrl.sub("__ID__", id), {"open":"comments"}, 'blog_posts_edit_'+id+'_inside_comments');
        break;
      case grid.getColumnModel().getIndexById("blog-post-spam_comments_count"):
        xl.openNewTabPanel('blog_posts_edit_'+id, editPostUrl.sub("__ID__", id), {"open":"spam_comment"}, 'blog_posts_edit_'+id+'_inside_comments');
        break;
      default:
        break;
    }
  });
  
  var selectAllAction = new Ext.Action({
    text: "Select all",
    iconCls: "display_none"
  });

  var clearAllAction = new Ext.Action({
    text: "Clear all",
    iconCls: "display_none",
    disabled: true
  });
  
  var deleteAction = new Ext.Action({
    text: "Delete",
    iconCls: "display_none",
    disabled: true
  });
  
  var selectionMenu =  new Ext.menu.Menu({
    items: [selectAllAction, clearAllAction]
  });
  
  selectionMenu.addSeparator();
  selectionMenu.add(deleteAction);
  
  xl.viewport.render();

  grid.getTopToolbar().add({ text: "Actions", menu: selectionMenu });

  function alertNoPostsSelected() {
    Ext.Msg.alert('No Posts Selected', 'Please select one or more posts to perform that action.');
  }

  function getSelectedIdsString(records){ 
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id);
    });
    return ids.toString()
  }
  
  clearAllAction.setHandler(function(e) {
    grid.getSelectionModel().clearSelections();
    e.disable();
  });

  selectAllAction.setHandler(function(e) {
    grid.getSelectionModel().selectAll();
    e.disable();
  });

  deleteAction.setHandler(function(e) {
    var records = grid.getSelectionModel().getSelections();
    if (records.length == 0) {
      alertNoPostsSelected();
      return false;
    }
    
    Ext.Msg.confirm("", "Delete selected blog posts permanently?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        grid.disable();
        params['ids'] = getSelectedIdsString(records);
        new Ajax.Request(#{destroy_collection_blog_posts_path.to_json}, {
          method: 'post',
          parameters: params,
          onSuccess: function(transport){
            grid.enable();
          }
        });
      }
    });
  });
  
  grid.getSelectionModel().on("selectionchange", function(){
    records = grid.getSelectionModel().getSelections();
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id);
    });
    selectedIds = ids;
    
    if(ids.length>0){
      clearAllAction.enable();
      deleteAction.enable();
    }
    else {
      deleteAction.disable();
      selectAllAction.enable();
    }
  });
  
  grid.on("validateedit", function(event){
    var record = event.record;
    var editedFieldName = event.field;
    
    record.set(editedFieldName, event.value);
    var method = "put";
    var objectId = record.get("id");

    var params = {};
    params["from_index"] = "true";
    params["blog_post[title]"] = record.get("title");
    
    new Ajax.Request(blogPostPath.sub("__ID__", objectId),{
      method: method,
      parameters: params,
      onSuccess: function(transport){
        response = Ext.util.JSON.decode(transport.responseText);
        record.set('id', response.id);
        record.set('title', response.title);
        xl.updateStatusBar(response.flash);
        if(response.flash.include('Error saving blog post:'))
          event.grid.getView().getCell(event.row, event.column).highlight({startcolor: "FF5721"});
        else
          event.grid.getView().getCell(event.row, event.column).highlight();
      }
    });

  });
  
`
end
