afteredit_function = %Q`
  function(oldValue, decodedResponse, plainResponse, me){
    xl.updateStatusBar(decodedResponse.flash);
    if(decodedResponse.success){
      #{refresh_grid_datastore_of("blog_post")};
    }    
  }
`

limit = params[:limit] || 50
after_render = self.set_active_tab
page << create_tab_using_ajax_response("Post | #{truncate(@blog_post.title, 15)}", after_render) do
%Q`
  var form = {url: #{blog_post_path(@blog_post).to_json}, object: 'blog_post'};
  #{render_tags_panel("blog_post[tag_list]", @blog_post, current_account.blog_posts.tags, {}, {:collapsible => false, :title => ""})}

  #{self.generate_save_close_cancel_toolbar(@blog_post, blog_post_path(@blog_post), blog_post_path(:id => @blog_post.id, :commit_type => "close"))}
    
  var authorNameField = new Ext.form.TextField({
    fieldLabel: "Author name",
    labelSeparator: ":",
    name: "blog[author_name]",
    grow: true,
    growMin: 150,
    value: #{@blog_post.author_name.to_json},
    disabled: #{!current_user.can?(:edit_blogs)}
  });
  
  // set up connection and data store of autocomplete field
  var partyNameAutoCompleteRecord = new Ext.data.Record.create([
    {name: 'display', mapping: 'display'},
    {name: 'name', mapping: 'value'},
    {name: 'id', mapping: 'id'}
  ]);

  var partyNameAutoCompleteReader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, partyNameAutoCompleteRecord)
  var partyNameAutoCompleteConnection = new Ext.data.Connection({url: #{formatted_auto_complete_party_field_listings_path(:format => :json).to_json}, method: 'get'});
  var partyNameAutoCompleteProxy = new Ext.data.HttpProxy(partyNameAutoCompleteConnection)
  var partyNameAutoCompleteStore = new Ext.data.Store({proxy: partyNameAutoCompleteProxy, reader: partyNameAutoCompleteReader});
  
  var authorAutoCompleteField = new Ext.form.ComboBox({
    store: partyNameAutoCompleteStore,
    displayField: 'display',
    valueField: 'id',
    hiddenName: "blog_post[author_id]",
    fieldLabel: "Author",
    triggerAction: 'all',
    forceSelection: true,
    emptyText: "Autocomplete field, please start typing",
    hideTrigger:true,
    minChars: 0,
    width: 400,
    allowBlank: false,
    value: #{(@blog_post.author ? @blog_post.author.display_name : "").to_json},
    hiddenValue: #{(@blog_post.author ? @blog_post.author.id : nil)},
    listeners: {
        "change": function(comboBox, newValue, oldValue){
          var partyName = partyNameAutoCompleteStore.getById(newValue).get("name");
          authorNameField.setValue(partyName);
        }
      },
    disabled: #{!current_user.can?(:edit_blogs)}
  });

  
  var tbarbbarButtons2 = [{
    text: 'Save',
    handler: function(me, event){
        excerptPanel.el.mask('Saving...');
        xl.maskedPanels.push(excerptPanel);
        excerptPanel.getForm().doAction('submit',
          {
            url: #{blog_post_path(@blog_post).to_json}, 
            method: 'put', 
            success: function(form, action) {
              xl.log('SUCCESS: ' + action.result);
              response = action.result;
              
              // clear dirty flag on fields
              form.setValues(form.getValues());
              if(typeof(response)=="undefined")
              {
                formPanel.el.unmask();
                xl.maskedPanels.remove(excerptPanel);
                Ext.Msg.alert("Saving failed", "Proper connection with the server cannot be established");
              }  
              xl.updateStatusBar(response.flash);
              
              #{refresh_grid_datastore_of(@blog_post.class.name.underscore)};
              
              $("#{dom_id(@blog_post)}_errorMessages").innerHTML = "";
              if(response.close)
                xl.closeTabs('#{params[:controller]}_edit_'+response.id);
  
              excerptPanel.el.unmask();
              xl.maskedPanels.remove(excerptPanel);
            },
            failure: function(form, action) {
              response = action.result;
              excerptPanel.el.unmask();
              xl.maskedPanels.remove(excerptPanel);
              $("#{dom_id(@blog_post)}_errorMessages").innerHTML = response.errors;
            }
          });
        }
      },{
        text: 'Save and Close',
        handler: function(me, event){
            excerptPanel.el.mask('Saving...');
            xl.maskedPanels.push(excerptPanel);
            excerptPanel.getForm().doAction('submit',
              {
                url: #{blog_post_path(:id => @blog_post.id, :commit_type => "close").to_json}, 
                method: 'put', 
                success: function(form, action) {
                  xl.log('SUCCESS: ' + action.result);
                  response = action.result;
                  
                  // clear dirty flag on fields
                  form.setValues(form.getValues());
                  
                  if(typeof(response)=="undefined")
                  {
                    excerptPanel.el.unmask();
                    xl.maskedPanels.remove(excerptPanel);
                    Ext.Msg.alert("Saving failed", "Proper connection with the server cannot be established");
                  }  
                  $("status-bar-notifications").innerHTML = response.flash; 
                  
                  #{refresh_grid_datastore_of(@blog_post.class.name.underscore)};
                  
                   if(response.close)
                        xl.closeTabs('blog_posts_edit_'+response.id);
      
                  excerptPanel.el.unmask();
                  xl.maskedPanels.remove(excerptPanel);
                },
                failure: function(form, action) {
                  xl.logXHRFailure;
                  response = action.result;
                  $("#{dom_id(@blog_post)}_errorMessages").innerHTML = response.errors;
                  formPanel.el.unmask();
                  xl.maskedPanels.remove(formPanel);
                }
              });
          }
      },{
        text: "Cancel",
        handler: function(me, event){
          var close = true;
          if(excerptPanel.getForm().isDirty()){
            Ext.Msg.show({buttons: Ext.Msg.YESNO, title: "Are you sure?", msg: "There are unsaved fields, are you sure you want to close this tab?", fn: function(btn, text){
              if(btn=="no"){
                close = false;
              }
              else{
                xl.closeTabPanel(#{self.create_id_from_params.to_json})
                  ;
              }
            }})
          }
          else{
               xl.closeTabPanel(#{self.create_id_from_params.to_json})
                  ;
          }
        }
      }];
  
  
  var tagsPanelWrapper = new Ext.Panel({
    title: "Tags",
    items: [tagsPanel]
  });

  var permalinkField = xl.widget.InlineActiveField({
    form: form,
    field: {
      fieldLabel: "Permalink",
      labelSeparator: ":",
      grow: true,
      growMin: 150,
      name: "permalink",
      value: #{@blog_post.permalink.to_json}
    }    
  });
  
  var excerptField = new Ext.ux.HtmlEditor({
    hideLabel: true,
    id: "blog_post_#{@blog_post.id}_excerpt",
    name: 'blog_post[excerpt]',
    width: '100%',
    height: 500,
    value: #{@blog_post.excerpt.to_json},
    listeners: {
      'resize': function(component){
        var size = component.ownerCt.body.getSize();
        component.suspendEvents();
        component.setSize(size.width-20, size.height-60);
        component.resumeEvents();
      },
      'render': function(component){
        component.getToolbar().insertButton(16, #{html_editor_image_video_embed_button(@blog_post)});
      }
    }
  });
  
  var bodyField = new Ext.ux.HtmlEditor({
    hideLabel: true,
    id: "blog_post_#{@blog_post.id}_editor",
    name: 'blog_post[body]',
    width: '99%',
    height: 400,
    value: #{@blog_post.body.to_json},
    listeners: {
      'render': function(component){
        component.getToolbar().insertButton(16, #{html_editor_image_video_embed_button(@blog_post)});
      }
    }
  });

  var blogSelectionStore = new Ext.data.SimpleStore({
    fields: ['display', 'value'],
    data: #{@blogs.map{|e| [e.title, e.id]}.to_json}
  });

  var blogSelectionField = new Ext.form.ComboBox({
    name: "",
    hiddenName: "blog_post[blog_id]",
    displayField: 'display',
    valueField: 'value',
    fieldLabel: 'Blog',
    triggerAction: 'all',
    mode: 'local',
    allowBlank: false,
    forceSelection: true,
    store: blogSelectionStore,
    value: #{@default_blog.id}    
  });  

  /////////////////////////////////////// CREATE GRID PANEL FOR COMMENTS //////////////////////////////////////////
  
  var commentPath = "#{comment_path(:commentable_type => "BlogPost", :commentable_id => @blog_post.id, :id => "__ID__")}";
  
  // create file record
  var CommentRecord = new Ext.data.Record.create([
    {name: 'id', mapping: 'id'},
    {name: 'name', mapping: 'name'},
    {name: 'url', mapping: 'url'},
    {name: 'email', mapping: 'email'},
    {name: 'created_at', mapping: 'created_at'},
    {name: 'approved_at', mapping: 'approved_at'},
    {name: 'referrer_url', mapping: 'referrer_url'},
    {name: 'body', mapping: 'body'},
    {name: 'user_agent', mapping: 'user_agent'}
  ]);
  
  // data reader to parse the json response
  var reader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, CommentRecord);

  // set up connection of the data
  var connection = new Ext.data.Connection({url: #{@formatted_comments_path.to_json}, method: 'get'});
  var proxy = new Ext.data.HttpProxy(connection);

  // set up the data store and then send request to the server
  var ds = new Ext.data.Store({proxy: proxy, reader: reader, remoteSort: true, baseParams: {q: ''}});
  ds.load({params: {start: 0, limit: #{limit}, blog_post_id: #{@blog_post.id} }});

  // set up the ext grid object
  var xg = Ext.grid;

  // define paging toolbar that is going to be appended to the footer of the grid panel
  var paging = new Ext.PagingToolbar({
    store: ds,
    pageSize: #{limit},
    displayInfo: true,
    displayMsg: 'Displaying {0} to {1} of {2}',
    emptyMsg: "No record to display",
    cls: "bottom-toolbar paging-toolbar-bottom",
    plugins: [new Ext.ux.PageSizePlugin]
  });
  
  #{create_grid_tbar_filter_field}
  
  #{create_grid_tbar_clear_button}
  
  var spamStore = new Ext.data.SimpleStore({
    fields: ['display', 'value'],
    data: [['Not spam', 'false'], ['Spam', 'true']]
  });
  
  var spamSelection = xl.widget.FormField({
    displayField: 'display', 
    valueField: 'value',
    hiddenName: 'spam',
    fieldLabel: 'View',
    value: 'false', 
    type: 'combobox', 
    store: spamStore, 
    editable : false,
    triggerAction: 'all',
    mode: 'local'
  });
  
  spamSelection.on('select', function(el, newValue, oldValue){
    ds.baseParams['spam'] = newValue.data.value;
    ds.reload({params: {start: 0, limit: ds.lastOptions.params.limit}});
    if(newValue.data.value == "true"){
      markAsHamAction.enable();
      markAsSpamAction.disable();
    }
    else{
      markAsHamAction.disable();
      markAsSpamAction.enable();
    }
  });

  var selectAllAction = new Ext.Action({
    text: "Select all",
    iconCls: "display_none"
  });

  var clearAllAction = new Ext.Action({
    text: "Clear all",
    iconCls: "display_none",
    disabled: true
  });
  
  var approveAction = new Ext.Action({
    text: "Approve",
    iconCls: "display_none",
    disabled: true
  });
    
  var unapproveAction = new Ext.Action({
    text: "Unapprove",
    iconCls: "display_none",
    disabled: true
  });
  
  var deleteAction = new Ext.Action({
    text: "Delete",
    iconCls: "display_none",
    disabled: true
  });
  
  var markAsHamCheckboxField = new Ext.form.Checkbox({
    fieldLabel: "Approve comment as well?",
    labelSeparator: " ",
    name: "approve"
  });
  
  var markAsHamFormPanel = new Ext.form.FormPanel({
    labelWidth: 150,
    items: [markAsHamCheckboxField]
  });

  var markAsHamWindow = new Ext.Window({
    title: "Mark as Not Spam",
    resizable: false,
    width: 300,
    height: 92,
    items: [markAsHamFormPanel],
    buttons:[
        {
          text: "OK",
          handler: function() {
              var records = grid.getSelectionModel().getSelections();
              var params = {};
              params['ids'] = getSelectedIdsString(records);
              markAsHamFormPanel.getForm().doAction("submit",
                {
                  url: #{mark_as_ham_comments_path().to_json},
                  method: "POST",
                  params: params
                }
              );
              if(markAsHamFormPanel.getForm().isValid()) {
                grid.enable();
                markAsHamWindow.hide();
                markAsHamWindow.close();
              }
            }
        },
        {
          text: 'Cancel',
          handler: function() { grid.enable(); markAsHamWindow.hide(); markAsHamWindow.close(); }
        }
      ]
  });

  var markAsHamAction = new Ext.Action({
    text: "Mark as Not Spam",
    iconCls: "display_none",
    disabled: true,
    handler: function() {
      grid.disable();
      markAsHamWindow.show();
    }
  });
  
  var markAsSpamAction = new Ext.Action({
    text: "Mark as Spam",
    iconCls: "display_none",
    disabled: false,
    handler: function() {
      var records = grid.getSelectionModel().getSelections();
      Ext.Msg.confirm("", "Mark selected comment(s) as spam?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        params['ids'] = getSelectedIdsString(records);
        new Ajax.Request(#{mark_as_spam_comments_path.to_json}, {
          method: 'post',
          parameters: params
        });
      }
    });
    }
  });
  
  var selectionMenu =  new Ext.menu.Menu({
    items: [selectAllAction, clearAllAction]
  });
  
  selectionMenu.addSeparator();
  selectionMenu.add(approveAction, unapproveAction, markAsHamAction, markAsSpamAction);
  selectionMenu.addSeparator();  
  selectionMenu.add(deleteAction);

  var gridTopToolbar = new Ext.Toolbar({
    cls: "top-toolbar",
    items: [
      {
        text: "New Comment", 
        handler: function(btn, event){
          Ext.Ajax.request({
            url: #{new_comment_path(:commentable_type => "BlogPost", :commentable_id => @blog_post.id).to_json}.replace("&amp;", "&")
          });
        }
      },
      {text: "&nbsp;&nbsp;&nbsp;Status:"}, 
      spamSelection,
      {text:"&nbsp;&nbsp;&nbsp;Filter: "}, 
      filterField, 
      clearButton,
      { text: "Actions", menu: selectionMenu }]
  });
  
  var editRenderer = function(value, cell, record) {
    return '<div class="icon_pencilGo pointerOnHover"/>';
  };
  
  var grid = new Ext.grid.GridPanel({
      title: "Comments", 
      store: ds,
      cm: new Ext.grid.ColumnModel([
          {id: "edit", width: 35, dataIndex: 'id', renderer: editRenderer, sortable: false, menuDisabled: true, hideable: false, tooltip: "Click here to go to full edit mode" },
          {id: "comment-name", width: 175, header: "Name", sortable: true, dataIndex: 'name', editor: new Ext.form.TextField()},
          {id: "comment-email", width: 150, header: "Email", sortable: true, dataIndex: 'email'},
          {id: "comment-body", header: "Body", sortable: true, dataIndex: 'body'},
          {id: "comment-url", width: 200, header: "URL", sortable: true, dataIndex: 'url'},
          {id: "comment-approved_at", width: 100, header: "Approved at", sortable: true, dataIndex: 'approved_at'},
          {id: "comment-created_at", width: 100, header: "Created at", sortable: true, dataIndex: 'created_at'},
          {id: "comment-referrer_url", width: 100, header: "Referrer url", hidden: true, sortable: true, dataIndex: 'referrer_url'},
          {id: "comment-user_agent", width: 100, header: "User agent", sortable: true, hidden: true, dataIndex: 'user_agent'}          
        ]),
      autoScroll: true,
      width: "100%",
      tbar: gridTopToolbar, 
      bbar: paging,
      selModel: new Ext.grid.RowSelectionModel,
      viewConfig: {autoFill: true, forceFit: true},
      autoExpandColumn: "comment-body",
      height: #{get_default_grid_height(nil)}-61,
      loadMask: true
  });
  
  grid.doNotSyncSize = true;
  Ext.EventManager.onWindowResize(function() {grid.setWidth(xl.centerPanel.getInnerWidth());});
  Ext.EventManager.onWindowResize(function() {grid.setHeight(xl.centerPanel.getInnerHeight());});
  
  var editCommentUrl = #{@edit_comment_path.to_json};
  // set double click action on grid cells
  grid.on("cellclick", function(gr, rowIndex, columnIndex, e) {
    var record = ds.getAt(rowIndex);
    var id = record.data.id;

    switch(columnIndex){
      case grid.getColumnModel().getIndexById("edit"):
        xl.openNewTabPanel('comments_edit_'+id, editCommentUrl.sub("__ID__", id));
        break;
      default:
        break;
    }
  });
  
  ///////////////////////////////////// END CREATE GRID PANEL FOR COMMENTS ////////////////////////////////////////
  
  
  var publishedCheckbox = new Ext.form.Checkbox({
    fieldLabel: "Published",
    name: "publish",
    checked: #{!@blog_post.published_at.nil?},
    listeners: {
      'check': function(me, checked){
        if(checked){
          publishedDateField.enable();
          publishedAMPMField.enable();
          publishedHourField.enable();
          publishedMinuteField.enable();
          publishedDisabled.disable();
        }else{
          publishedDateField.disable();
          publishedAMPMField.disable();
          publishedHourField.disable();
          publishedMinuteField.disable();
          publishedDisabled.enable();
        }
      }
    }
  });
  
  var publishedDisabled = new Ext.form.Hidden({
    name: 'disable_publish',
    value: true,
    disabled: #{!@blog_post.published_at.blank?}
  });
  
  var publishedDateField = new Ext.form.DateField({
    fieldLabel: "on",
    name: "blog_post[published_at]",
    format: 'F j, Y',
    width: 155,
    allowBlank: true,
    value: #{(@blog_post.published_at ? @blog_post.published_at.strftime("%Y-%m-%d") : Date.today.to_s).to_json},
    disabled: #{@blog_post.published_at.blank?}
  });
  
  var publishedHourField = new Ext.form.ComboBox({
    fieldLabel: 'at',
    labelSeparator: '',
    name: 'published_at[hour]',
    allowBlank: true,
    width: 55,
    store: xl.generateMemoryArrayStore({
      records: xl.generateIdStringRecordsForRange($R(0, 11)),
      idPos: 0,
      mappings: [{name: 'text', mapping: 1}],
      doLoad: true
    }),
    mode: 'local',
    value: #{(@blog_post.published_at ? @blog_post.published_at.strftime("%I").to_i%12 : Time.now.utc.strftime("%I").to_i%12).to_json},
    displayField: 'text',
    editable: true,
    valueField: 'text',
    triggerAction: 'all',
    disabled: #{@blog_post.published_at.blank?}
  });
  
  var publishedMinuteField = new Ext.form.ComboBox({
    fieldLabel: ':',
    labelSeparator: '',
    name: 'published_at[min]',
    allowBlank: true,
    width: 55,
    store: xl.generateMemoryArrayStore({
      records: xl.generateIdStringRecordsForRange($R(0, 55), 5, {pad: 2}),
      idPos: 0,
      mappings: [{name: 'text', mapping: 1}],
      doLoad: true
    }),
    mode: 'local',
    value: #{(@blog_post.published_at ? @blog_post.published_at.strftime("%M") : Time.now.utc.strftime("%M")).to_json},
    displayField: 'text',
    editable: true,
    valueField: 'text',
    triggerAction: 'all',
    disabled: #{@blog_post.published_at.blank?}
  });
  
  var publishedAMPMField = new Ext.form.ComboBox({
    labelSeparator: '',
    name: 'published_at[ampm]',
    allowBlank: true,
    width: 45,
    store: xl.generateMemoryArrayStore({
      records: [ [0, 'AM'], [1, 'PM'] ],
      idPos: 0,
      mappings: [{name: 'text', mapping: 1}],
      doLoad: true
    }),
    mode: 'local',
    value: #{(@blog_post.published_at ? @blog_post.published_at.strftime("%p") : Time.now.utc.strftime("%p")).to_json},
    selectOnFocus: true,
    displayField: 'text',
    editable: false,
    hideLabel: true,
    valueField: 'text',
    triggerAction: 'all',
    disabled: #{@blog_post.published_at.blank?}
  });
  
  var formPanel = new Ext.form.FormPanel({
    title: "Main Info", 
    autoScroll: true,
    tbar: tbarbbarButtons,
    bbar: tbarbbarButtons,
    labelWidth: 60,
    items: [
      {html: '<div class="notices" id="#{dom_id(@blog_post)}_errorMessages"/>'},
      {
        layout: "column",
        items: [      
          {  
            layout: "form",
            columnWidth: .4, 
            items: [
              blogSelectionField,
              new Ext.form.TextField({
                fieldLabel: "Title",
                labelSeparator: ":",
                grow: true,
                growMin: 150,
                name: "blog_post[title]",
                value: #{@blog_post.title.to_json}
              }),
              authorAutoCompleteField,
              authorNameField
            ]
          },
          {
            layout: "form",
            columnWidth: .6,
            items: [
              new Ext.form.TextField({
                fieldLabel: "Link",
                labelSeparator: ":",
                grow: true,
                growMin: 150,
                name: "blog_post[link]",
                value: ""
              }),
              {
                layout: 'column',
                items: [{
                  layout: 'form',
                  items: [
                    publishedCheckbox
                  ]
                },{ // TableLayout
                  layout: 'column',
                  defaults: {
                    layout: 'form',
                    labelWidth: 65,
                    labelAlign: 'right'
                  },
                  items: [
                    { // Column 1
                      width: 195,
                      labelWidth: 35,
                      items: [publishedDateField, publishedDisabled]
                    },{ // Column 2
                      width: 83,
                      labelWidth: 20,
                      items: [publishedHourField]
                    },{ // Column 3
                      width: 70,
                      labelWidth: 5,
                      items: [publishedMinuteField]
                    },{ // Column 4
                      width: 55,
                      items: [publishedAMPMField]
                    },{ // end Column 5
                      html: "UTC"
                    }
                  ] // end ColumnLayout.items
                }]
              }    
            ]
          }
        ]
      },
      bodyField
    ],
    listeners: {
      'render': function(component){
        var size = component.ownerCt.body.getSize();
        component.suspendEvents();
        component.setSize(size.width, size.height);
        component.resumeEvents();
      }
    }
  });

  var disableCommentsCheckbox = new Ext.form.Checkbox({
    fieldLabel: "Disable Commenting",
    name: "disable_comments",
    checked: #{!@blog_post.deactivate_commenting_on.nil?},
    listeners: {
      'check': function(me, checked){
        var parameters = {};
        if(checked) {
          disableCommentsDateField.enable();
          parameters["blog_post[deactivate_commenting_on]"] = disableCommentsDateField.getValue().format("F j, Y");
        }
        else {
          disableCommentsDateField.disable();
          parameters["blog_post[deactivate_commenting_on]"] = false;
        }
        Ext.Ajax.request({
          url: #{blog_post_path(@blog_post).to_json},
          params: parameters,
          method: "PUT"
        });
      }
    }
  });
  
  var disableCommentsDateField = new Ext.form.DateField({
    fieldLabel: "on",
    name: "blog_post[deactivate_commenting_on]",
    format: 'F j, Y',
    width: 155,
    allowBlank: true,
    minValue: #{Date.today.to_s.to_json},
    value: #{(@blog_post.deactivate_commenting_on ? @blog_post.deactivate_commenting_on.to_s : Date.today.to_s).to_json},
    disabled: #{@blog_post.deactivate_commenting_on.blank?},
    listeners: {
      change: function(me, newValue, oldValue){
        Ext.Ajax.request({
          url: #{blog_post_path(@blog_post).to_json},
          params: {"blog_post[deactivate_commenting_on]": newValue.format("F j, Y")},
          method: "PUT"
        });
      }
    }
  });
 
  var hideCommentsCheckbox = new Ext.form.Checkbox({
    fieldLabel: "Hide Comments",
    name: "hide_comments",
    checked: #{@blog_post.hide_comments.to_json},
    type: 'checkbox',
    listeners: {
      'check': function(me, checked){
        var parameters = {};
        parameters["blog_post[hide_comments]"] = checked;
        
        Ext.Ajax.request({
          url: #{blog_post_path(@blog_post).to_json},
          params: parameters,
          method: "PUT"
        });
      }
    }
  })
 
  var advancedSettingsPanel  = new Ext.Panel({
    title: "Advanced",
    layout: "form",
    items: [
      permalinkField,
      hideCommentsCheckbox,
      {
        layout: 'column',
        items: [{
          layout: 'form',
          items: [
            disableCommentsCheckbox
          ]
        },{
          layout: 'form',
          style: 'margin-left: 10px;',
          labelWidth: 20,
          items: [
            disableCommentsDateField
          ]}
        ]
      }    
    ]
  });
  
  var extrasPanel = new Ext.Panel({
    title: "Extras", 
    layout:"form",
    items: [
      tagsPanelWrapper,
      advancedSettingsPanel
    ],
    autoScroll:true
  });
  
  var excerptPanel = new Ext.FormPanel({  
    title: "Excerpt", 
    autoScroll: true,
    tbar: tbarbbarButtons2,
    bbar: tbarbbarButtons2,
    layout:"form",
    items: [
      {title: "Excerpt/Summary", items:[excerptField]}
    ]
  });
  
  var tabPanel = new Ext.TabPanel({
    activeTab: 0,
    tabPosition: "bottom",
    layoutOnTabChange: true, 
    items: [
      formPanel,
      excerptPanel,
      extrasPanel,
      grid
    ]
  });
  
  xl.runningInsideTabs.set(#{self.create_id_from_params.to_json}, tabPanel);
  tabPanel.on("destroy", function(){
    xl.runningInsideTabs.unset(#{self.create_id_from_params.to_json});
  });
  
  newPanel.add(tabPanel);
  
  xl.runningGrids.set("comments_BlogPost_#{@blog_post.id}", grid);
  tabPanel.on("destroy", function(){
    xl.runningGrids.unset("comments_BlogPost_#{@blog_post.id}");
  });
  
  xl.viewport.render();

  function alertNoPostsSelected() {
    Ext.Msg.alert('No comments Selected', 'Please select one or more comments to perform that action.');
  }

  function getSelectedIdsString(records){ 
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id);
    });
    return ids.toString();
  }
  
  clearAllAction.setHandler(function(e) {
    grid.getSelectionModel().clearSelections();
    e.disable();
  });

  selectAllAction.setHandler(function(e) {
    grid.getSelectionModel().selectAll();
    e.disable();
  });

  deleteAction.setHandler(function(e) {
    var records = grid.getSelectionModel().getSelections();
    if (records.length == 0) {
      alertNoPostsSelected();
      return false;
    }
    
    Ext.Msg.confirm("", "Delete selected comments permanently?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        grid.disable();
        params['commentable_type'] = 'BlogPost';
        params['commentable_id'] = #{@blog_post.id};
        params['ids'] = getSelectedIdsString(records);
        new Ajax.Request("#{destroy_collection_comments_path}", {
          method: 'post',
          parameters: params,
          onSuccess: function(transport){
            grid.enable();
          }
        });
      }
    });
  });

  approveAction.setHandler(function(e) {
    var records = grid.getSelectionModel().getSelections();
    if (records.length == 0) {
      alertNoPostsSelected();
      return false;
    }
    
    Ext.Msg.confirm("", "Approved selected comments?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        grid.disable();
        params['commentable_type'] = 'BlogPost';
        params['commentable_id'] = #{@blog_post.id};
        params['ids'] = getSelectedIdsString(records);
        new Ajax.Request("#{approve_collection_comments_path}", {
          method: 'post',
          parameters: params,
          onSuccess: function(transport){
            grid.enable();
          }
        });
      }
    });
  });

  unapproveAction.setHandler(function(e) {
    var records = grid.getSelectionModel().getSelections();
    if (records.length == 0) {
      alertNoPostsSelected();
      return false;
    }
    
    Ext.Msg.confirm("", "Unapproved selected comments?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        grid.disable();
        params['commentable_type'] = 'BlogPost';
        params['commentable_id'] = #{@blog_post.id};
        params['ids'] = getSelectedIdsString(records);
        new Ajax.Request("#{unapprove_collection_comments_path}", {
          method: 'post',
          parameters: params,
          onSuccess: function(transport){
            grid.enable();
          }
        });
      }
    });
  });
  
  grid.getSelectionModel().on("selectionchange", function(){
    records = grid.getSelectionModel().getSelections();
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id);
    });
    
    if(ids.length>0){
      clearAllAction.enable();
      approveAction.enable();
      unapproveAction.enable();
      deleteAction.enable();
    }
    else {
      deleteAction.disable();
      approveAction.disable();
      unapproveAction.disable();
      selectAllAction.enable();
    }
  });
`

end
