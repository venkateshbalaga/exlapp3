limit = params[:limit] || 50

after_render = %Q`
  ds.load({params: {start: 0, limit: #{limit} }});
`

page << create_tab_using_ajax_response("Destinations | Index", after_render) do
%Q`

  var selectedIds = null;
  
  var destinationPath = #{destination_path("__ID__").to_json};
  
  #{create_countries_and_states_store}
  
  var DestinationRecord = new Ext.data.Record.create([
    {name: 'id', mapping: 'id'},
    {name: 'country', mapping: 'country'}, 
    {name: 'state', mapping: 'state'}, 
    {name: 'cost', mapping: 'cost'}, 
    {name: 'prefix', mapping: 'prefix'},
    {name: 'suffix', mapping: 'suffix'}
        
  ]);
  // data reader to parse the json response
  var reader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, DestinationRecord);
  
  // set up connection of the data
  var connection = new Ext.data.Connection({url: #{formatted_destinations_path(:format => :json).to_json}, method: 'get'});
  var proxy = new Ext.data.HttpProxy(connection);

  // set up the data store and then send request to the server
  var ds = new Ext.data.Store({proxy: proxy, reader: reader, remoteSort: true, baseParams: {q: ''}});
  
    // define paging toolbar that is going to be appended to the footer of the grid panel
  var paging = new Ext.PagingToolbar({
    store: ds,
    pageSize: #{limit},
    displayInfo: true,
    displayMsg: 'Displaying {0} to {1} of {2}',
    emptyMsg: "No record to display",
    cls: "bottom-toolbar paging-toolbar-bottom",
    plugins: [new Ext.ux.PageSizePlugin]
  });
  
  #{create_grid_tbar_filter_field}
  
  #{create_grid_tbar_clear_button}

  var gridTopToolbar = new Ext.Toolbar({
    cls:"top-toolbar"
    ,items:[
      {text:"New", handler:function(){xl.openNewTabPanel('destinations_new_nil', #{new_destination_path.to_json})}}
      ,{xtype:"tbtext", text:"&nbsp;&nbsp;&nbsp;Filter: "}
      ,filterField
      ,clearButton
    ]
  });

  var countriesComboBox = new Ext.form.ComboBox({
    store: countriesStore,
    displayField: 'value',
    valueField: 'id',
    triggerAction: 'all',
    minChars: 0,
    allowBlank: false, 
    mode: 'local'
  });
  
  var statesComboBox = new Ext.form.ComboBox({
    store: statesStore,
    displayField: 'value',
    valueField: 'id',
    triggerAction: 'all',
    minChars: 0,
    allowBlank: false, 
    mode: 'local'
  });
    
  var grid = new Ext.grid.EditorGridPanel({
    store: ds,
    cm: new Ext.grid.ColumnModel([
        {id: "country", width: 200, header: "Country", sortable: true, dataIndex: 'country', editor: countriesComboBox},
        {id: "state", width: 200, header: "State", sortable: true, dataIndex: 'state', editor: statesComboBox},
        {id: "cost", width: 200, header: "Cost", sortable: true, dataIndex: 'cost', editor: new Ext.form.TextField({allowBlank: false})}
      ]),
    viewConfig: {
      forceFit: false
    },
    autoScroll: true,
    autoWidth: true,
    height: #{get_default_grid_height(nil)},
    clicksToEdit:1,
    tbar: gridTopToolbar, 
    bbar: paging,
    loadMask: true,
    selModel: new Ext.grid.RowSelectionModel
  });
  
  var selectAllAction = new Ext.Action({
    text: "Select all",
    iconCls: "display_none"
  });

  var clearAllAction = new Ext.Action({
    text: "Clear all",
    iconCls: "display_none",
    disabled: true
  });
  
  var deleteAction = new Ext.Action({
    text: "Delete",
    iconCls: "display_none",
    disabled: true
  });
  
  var selectionMenu =  new Ext.menu.Menu({
    items: [selectAllAction, clearAllAction]
  });
  
  selectionMenu.addSeparator();
  selectionMenu.add(deleteAction);
  
  clearAllAction.setHandler(function(e) {
    grid.getSelectionModel().clearSelections();
    selectedIds = [];
    e.disable();
  });

  selectAllAction.setHandler(function(e) {
    grid.getSelectionModel().selectAll();
    e.disable();
  });
  
  deleteAction.setHandler(function(e) {
    Ext.Msg.confirm("", "Delete selected destinations permanently?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        params['ids'] = selectedIds.toString();
        new Ajax.Request(#{destroy_collection_destinations_path.to_json}, {
          method: 'post',
          parameters: params
        });
      }
    });
  });
  
  newPanel.add(grid);
  xl.runningGrids.set("destination", grid);
  newPanel.on("destroy", function(){
    xl.runningGrids.unset("destination");
  });
  
  xl.viewport.render();
  
  grid.getTopToolbar().add({ text: "Actions", menu: selectionMenu });

  grid.getSelectionModel().on("selectionchange", function(){
    records = grid.getSelectionModel().getSelections();
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id);
    });
    selectedIds = ids;

    if(ids.length>0){
      clearAllAction.enable();
      deleteAction.enable();
    }
    else
      deleteAction.disable();
      selectAllAction.enable();
  });

  grid.on("validateedit", function(event){
    var record = event.record;
    var editedFieldName = event.field;

    record.set(editedFieldName, event.value);
    var method = "put";
    var objectId = record.get("id");

    var params = {};
    params["destination[state]"] = record.get("state");
    params["destination[country]"] = record.get("country");
    params["destination[cost]"] = record.get("cost");
    
    new Ajax.Request(destinationPath.sub("__ID__", objectId),{
      method: method,
      parameters: params,
      onSuccess: function(transport){
        response = Ext.util.JSON.decode(transport.responseText);
        record.set('id', response.id);
        record.set('country', response.country);
        record.set('state', response.state);
        record.set('cost', response.cost);
        $("status-bar-notifications").innerHTML = response.flash;
        if(response.flash.include('Error:'))
          event.grid.getView().getCell(event.row, event.column).highlight({startcolor: "FF5721"});
        else
          event.grid.getView().getCell(event.row, event.column).highlight();
      }
    });

  });

`
end
