<% content_for :js  do %>

  <script type="text/javascript">
    Array.prototype.sum = function(field){
      if(field)
        for(var i=0,sum=0;i<this.length;sum+=parseFloat(this[i++].data[field]));
      else
        for(var i=0,sum=0;i<this.length;sum+=this[i++]);
      return sum;
    };
  
    var editAccountLeftPanel = new Ext.form.FieldSet({
      columnWidth:0.5
      
      ,title:"General Info"
      ,height:245
      ,items:[
        new Ext.form.TextField({
          fieldLabel:"Affiliate ID"
          ,name:"affiliate_account[username]"
          ,value:<%= self.current_user.username.to_json %>
          ,allowBlank:false
        })
        ,new Ext.form.TextField({
          fieldLabel:"E-mail"
          ,name:"affiliate_account[email_address]"
          ,value:<%= self.current_user.email_address.to_json %>
          ,allowBlank:false
        })
        ,new Ext.form.ComboBox({
          fieldLabel:"Honorific"
          ,name:"affiliate_account[honorific]"
          ,store:[["", ""], ["Mr.", "Mr."], ["Mrs.", "Mrs."], ["Ms", "Ms"]]
          ,width:60
          ,forceSelection:true
          ,editable:false
          ,triggerAction:"all"
          ,value:<%= self.current_user.honorific.to_json %>
        })
        ,new Ext.form.TextField({
          fieldLabel:"First Name"
          ,name:"affiliate_account[first_name]"
          ,value:<%= self.current_user.first_name.to_json %>
        })
        ,new Ext.form.TextField({
          fieldLabel:"Middle Name"
          ,name:"affiliate_account[middle_name]"
          ,value:<%= self.current_user.middle_name.to_json %>
        })
        ,new Ext.form.TextField({
          fieldLabel:"Last Name"
          ,name:"affiliate_account[last_name]"
          ,value:<%= self.current_user.last_name.to_json %>
        })
        ,new Ext.form.TextField({
          fieldLabel:"Company Name"
          ,name:"affiliate_account[company_name]"
          ,value:<%= self.current_user.company_name.to_json %>
        })
        ,new Ext.form.TextField({
          fieldLabel:"Position"
          ,name:"affiliate_account[position]"
          ,value:<%= self.current_user.position.to_json %>
        })
      ]
    });

    <%= self.create_countries_and_states_store %>
    var editAccountRightPanel = new Ext.form.FieldSet({
      columnWidth:0.5
      ,height:245
      ,title:"Mailing Address"
      ,items:[
        new Ext.form.TextField({
          fieldLabel:"Line 1"
          ,width:250
          ,name:"address[line1]"
          ,value:<%= self.current_user.address_line1.to_json %>
        })
        ,new Ext.form.TextField({
          fieldLabel:"Line 2"
          ,width:250
          ,name:"address[line2]"
          ,value:<%= self.current_user.address_line2.to_json %>
        })
        ,new Ext.form.TextField({
          fieldLabel:"Line 3"
          ,width:250
          ,name:"address[line3]"
          ,value:<%= self.current_user.address_line3.to_json %>
        })
        ,new Ext.form.TextField({
          fieldLabel:"City"
          ,width:250
          ,name:"address[city]"
          ,value:<%= self.current_user.address_city.to_json %>
        })
        ,new Ext.form.ComboBox({
          width:167
          ,name:'address[state]' 
          ,displayField:'value' 
          ,valueField:'value'
          ,fieldLabel:'Province/State' 
          ,store:statesStore
          ,triggerAction:'all'
          ,mode:'local'
          ,value:<%= self.current_user.address_state.to_json %>
        })
        ,new Ext.form.ComboBox({
          width:167
          ,listWidth:250
          ,name:'address[country]' 
          ,displayField:'value' 
          ,valueField:'value'
          ,fieldLabel:'Country' 
          ,store:countriesStore
          ,triggerAction:'all'
          ,mode:'local'
          ,value:<%= self.current_user.address_country.to_json %>
        })
        ,new Ext.form.TextField({
          fieldLabel:"Zip/Postal code"
          ,name:"address[zip]"
          ,value:<%= self.current_user.address_zip.to_json %>
        })
      ]
    });
    
    xl.affiliate.editAccountTab = new Ext.form.FormPanel({
      title:"Account info"
      ,border:false
      ,layout:"column"
      ,height:260
      ,items:[editAccountLeftPanel, editAccountRightPanel]
    });

    xl.affiliate.editAccountTab.addButton("Save", function(){
      xl.affiliate.editAccountTab.getForm().submit({
        url:<%= affiliate_account_path.to_json %>
        ,method:"PUT"
        ,success:function(form, action){
          Ext.Msg.alert("Account info updated", "Your account information has been successfully updated");
        }
        ,failure:function(form, action){
          Ext.Msg.alert("Updating account FAILED", action.result.errors.join("<br/>"));
        }
      })
    });
    
    xl.affiliate.settingsTab = new Ext.form.FormPanel({
      title:"Settings"
      ,height:125
      ,border:false
      ,items:[
        new Ext.form.TextField({
          name:"affiliate_account[old_password]"
          ,fieldLabel:"Old password"
          ,inputType:"password"
        })
        ,new Ext.form.TextField({
          name:"affiliate_account[password]"
          ,fieldLabel:"New password"
          ,inputType:"password"
          ,allowBlank:false
        })
        ,new Ext.form.TextField({
          name:"affiliate_account[password_confirmation]"
          ,fieldLabel:"Confirm new password"
          ,inputType:"password"
          ,allowBlank:false
        })
      ]
    });
    
    xl.affiliate.settingsTab.addButton("Change password", function(){
      xl.affiliate.settingsTab.getForm().submit({
        url:<%= change_password_affiliate_account_path.to_json %>
        ,method:"PUT"
        ,success:function(form, action){
          Ext.Msg.alert("Change password", "Password has been changed.");
        }
        ,failure:function(form, action){
          Ext.Msg.alert("Change password FAILED", action.result.errors);
        }
      })
    });
    
    xl.affiliate.ItemLineRecord = new Ext.data.Record.create([
      {name:"id", type:"int"}
      ,{name:"subscription_flag", type:"boolean"}
      ,{name:"quantity", type:"float"}
      ,{name:"price", type:"float"}
      ,{name:"extension_price", type:"float"}
      ,{name:"commission_percentage", type:"float"}
      ,{name:"commission_amount", type:"float"}
      ,{name:"status"}
      ,{name:"main_identifier"}
      ,{name:"domain_name"}
      ,{name:"month_timestamp"}
      ,{name:"created_on", type:"date"}
    ]);
    
    var itemLinesGridPanelStoreReader = new Ext.data.JsonReader(
      {totalProperty: "total", root: "collection", id: "id"}
      ,xl.affiliate.ItemLineRecord
    );
    var itemLinesGridPanelStoreProxy = new Ext.data.HttpProxy(new Ext.data.Connection({
      url:<%= formatted_referred_item_lines_affiliate_account_path(:format => :json).to_json %>
      ,method:"GET"
    })); 
    
    xl.affiliate.itemLinesGridPanelStore = new Ext.ux.MultiGroupingStore({
      proxy:itemLinesGridPanelStoreProxy
      ,reader:itemLinesGridPanelStoreReader
      ,sortInfo:{field:"created_on", direction:'ASC'}
      ,groupField:['month_timestamp', 'main_identifier']
      ,listeners:{
        load:function(cpt){
          xl.affiliate.itemLinesGridPanel.setHeight(xl.affiliate.itemLinesGridPanel.ownerCt.getSize().height);
        }
      }
    });

    xl.affiliate.itemLinesGridView = new Ext.ux.MultiGroupingView({
      hideGroupedColumn:true
      ,emptyGroupText:"All Group Fields Empty"
      ,displayEmptyFields:true
      ,sortInfo:{field:"created_on", direction:'ASC'}
      ,groupTextTpl:'{text} : {gvalue} ({[values.rs.length]} {[values.rs.length == 1 ? "Record" : "Records"]}) / Total Commission ${[values.rs.sum("commission_amount")]}'
      ,displayFieldSeparator:", "
    });
    
    xl.affiliate.totalAmountRenderer = function(v, params, data){
      return("Total: " + Ext.util.Format.usMoney(v));
    };
    
    xl.affiliate.percentageRenderer = function(v, params, data){
      var p = Math.round(v*100)/100.00;
      return("Average:&#160;" + p.toString() + "%");
    }

    xl.affiliate.itemLinesGridPanel = new Ext.ux.MultiGroupingPanel({
      id:"referred-items"
      ,store:xl.affiliate.itemLinesGridPanelStore
      ,view:xl.affiliate.itemLinesGridView
      ,cm:new Ext.grid.ColumnModel([
        {header:"Month", dataIndex:"month_timestamp"}
        ,{header:"Item", dataIndex:"main_identifier"}
        ,{header:"Domain origin", dataIndex:"domain_name"}
        ,{header:"Quantity", dataIndex:"quantity", width:50, align:"right"}
        ,{header:"Unit Price $", dataIndex:"price", width:65, align:"right"}
        ,{header:"Total Price $", dataIndex:"extension_price", width:140, align:"right", summaryType:"sum", summaryRenderer:xl.affiliate.totalAmountRenderer}
        ,{header:"Commission %", dataIndex:"commission_percentage", width:110, align:"right", summaryType:"average", summaryRenderer:xl.affiliate.percentageRenderer}
        ,{header:"Commission $", dataIndex:"commission_amount", width:140, align:"right", summaryType:"sum", summaryRenderer:xl.affiliate.totalAmountRenderer}
        ,{header:"Created on", dataIndex:"created_on", renderer:Ext.util.Format.dateRenderer("M d, Y"), width:80}
        ,{header:"Status", dataIndex:"status", id:"item-line-status", width:150}
      ])
      ,border:false
      ,autoScroll:true
      ,columnWidth:1
      ,autoWidth:true
      ,autoExpandColumn:"item-line-status"
      ,plugins:[new Ext.ux.grid.GridSummary({cls:"wider-left-margin"})]
      ,listeners:{
        render:function(cpt){cpt.getStore().load();}
      }
    });
    
    var changeGroupBy = function(e, t){
      var input = t.innerHTML;
      var t = ["month_timestamp"];
      if(input.match(/item/gi)){
        t.push("main_identifier");
      } else {
        t.push("domain_name") ;
      }
      xl.affiliate.itemLinesGridPanelStore.groupField = t;
      xl.affiliate.itemLinesGridPanelStore.reload();
    };
    
    xl.affiliate.GroupingPanel = new Ext.Panel({
      title:"Group by"
      ,html:<%= self.group_by_panel_content.to_json %>
      ,frame:true
      ,width:173
    });
    
    var referredItemsActionsPanel = new Ext.Panel({
      width:175
      ,items:[xl.affiliate.GroupingPanel]
      ,listeners:{
        "render":function(cpt){
          var ab = cpt.body;
          ab.on('mousedown', changeGroupBy, null, {delegate:'a'});
	        ab.on('click', Ext.emptyFn, null, {delegate:'a', preventDefault:true})          
        }
      }
    });

/////////////////////////////////////// TRACKING GRID PANEL ///////////////////////////////////////////
    xl.affiliate.TrackingLineRecord = new Ext.data.Record.create([
      {name:"referrer_url", type:"string"}
      ,{name:"target_url", type:"string"}
      ,{name:"created_on", type:"date"}
      ,{name:"year", type:"int"}
      ,{name:"month", type:"int"}
      ,{name:"day", type:"int"}
      ,{name:"counter", type:"int"}
    ]);
    
    var trackingLinesGridPanelStoreReader = new Ext.data.JsonReader(
      {totalProperty: "total", root: "collection"}
      ,xl.affiliate.TrackingLineRecord
    );
    var trackingLinesGridPanelStoreProxy = new Ext.data.HttpProxy(new Ext.data.Connection({
      url:<%= formatted_tracking_lines_affiliate_account_path(:format => :json).to_json %>
      ,method:"GET"
    }));
    
    xl.affiliate.trackingLinesGridPanelStore = new Ext.ux.MultiGroupingStore({
      proxy:trackingLinesGridPanelStoreProxy
      ,reader:trackingLinesGridPanelStoreReader
      ,sortInfo:{field:"created_on", direction:'ASC'}
      ,groupField:['year', 'month']
      ,listeners:{
        load:function(){
          xl.affiliate.trackingLinesGridPanel.setHeight(xl.affiliate.trackingLinesGridPanel.ownerCt.getSize().height-28);
        }
      }
    });

    xl.affiliate.trackingLinesGridView = new Ext.ux.MultiGroupingView({
      hideGroupedColumn:true
      ,emptyGroupText:"All Group Fields Empty"
      ,displayEmptyFields:true
      ,sortInfo:{field:"created_on", direction:'ASC'}
      ,groupTextTpl:'{text} : {gvalue} ({[values.rs.sum("counter")]} {[values.rs.sum("counter") == 1 ? "Click" : "Clicks"]})'
      ,displayFieldSeparator:", "
    });

    xl.affiliate.totalClickRenderer = function(v, params, data){
      return("Total clicks: " + v);
    };
    
    xl.affiliate.trackingLinesGridPanel = new Ext.ux.MultiGroupingPanel({
      title:"Tracking"
      ,id:"tracking-lines"
      ,store:xl.affiliate.trackingLinesGridPanelStore
      ,view:xl.affiliate.trackingLinesGridView
      ,cm:new Ext.grid.ColumnModel([
        {header:"Year", dataIndex:"year"}
        ,{header:"Month", dataIndex:"month"}
        ,{header:"Day", dataIndex:"day", width:45}
        ,{header:"Referrer URL", dataIndex:"referrer_url", width:250}
        ,{header:"Target URL", dataIndex:"target_url", width:200}
        ,{header:"Click(s)", width:250, dataIndex:"counter", align:"right", summaryType:"sum", summaryRenderer:xl.affiliate.totalClickRenderer}
      ])
      ,border:false
      ,autoScroll:true
      ,columnWidth:1
      ,autoWidth:true
      ,plugins:[new Ext.ux.grid.GridSummary({cls:"wider-left-margin"})]
      ,listeners:{
        render:function(cpt){cpt.getStore().load();}
      }
    });
/////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////// REFERRED AFFILIATES //////////////////////////////////////////////////
    xl.affiliate.AffiliateAccountRecord = new Ext.data.Record.create([
      {name:"id", type:"int"}
      ,{name:"username", type:"string"}
      ,{name:"email_address", type:"string"}
      ,{name:"activated_at", type:"date"}
      ,{name:"source_domain", type:"string"}
      ,{name:"full_name", type:"string"}
    ]);
    
    var referredAffiliatesGridPanelStoreReader = new Ext.data.JsonReader(
      {totalProperty: "total", root: "collection", id:"id"}
      ,xl.affiliate.AffiliateAccountRecord
    );
    var referredAffiliatesGridPanelStoreProxy = new Ext.data.HttpProxy(new Ext.data.Connection({
      url:<%= formatted_referred_affiliate_accounts_affiliate_account_path(:format => :json).to_json %>
      ,method:"GET"
    }));
    
    xl.affiliate.referredAffiliatesGridPanelStore = new Ext.data.Store({
      proxy:referredAffiliatesGridPanelStoreProxy
      ,reader:referredAffiliatesGridPanelStoreReader
    });

    xl.affiliate.referredAffiliatesGridPanel = new Ext.grid.GridPanel({
      title:"Referred Affiliates"
      ,id:"referred-affiliates"
      ,store:xl.affiliate.referredAffiliatesGridPanelStore
      ,cm:new Ext.grid.ColumnModel([
        {header:"Affiliate ID", dataIndex:"username", width:150}
        ,{header:"Name", dataIndex:"full_name", width:150}
        ,{header:"Email", dataIndex:"email_address", width:150}
        ,{header:"Activated on", dataIndex:"activated_at", width:100, renderer:Ext.util.Format.dateRenderer("M d, Y")}
        ,{header:"Domain", dataIndex:"source_domain", width:100}
      ])
      ,tbar:[{text:"Refresh", handler:function(){xl.affiliate.referredAffiliatesGridPanelStore.reload()}}]
      ,border:false
      ,autoHeight:true
      ,columnWidth:1
      ,autoWidth:true
      ,listeners:{
        render:function(cpt){cpt.getStore().load()}
      }
    });
/////////////////////////////////////////////////////////////////////////////////////////////////////////


    xl.affiliate.referralItemsWrapper = new Ext.Panel({
      layout:"column"
      ,title:"Referred items"
      ,items:[referredItemsActionsPanel, xl.affiliate.itemLinesGridPanel]
      ,border:false
      ,listeners:{
        "render":function(cpt){cpt.setHeight(cpt.ownerCt.getSize().height)}
      }
    });
    
    xl.affiliate.mainTabPanel = new Ext.TabPanel({
      activeTab:0
      ,border:false
      ,items:[
        xl.affiliate.referralItemsWrapper
        ,xl.affiliate.trackingLinesGridPanel
        ,xl.affiliate.referredAffiliatesGridPanel
        ,xl.affiliate.editAccountTab
        ,xl.affiliate.settingsTab]
      ,listeners:{
        "render":function(cpt){cpt.setHeight(cpt.ownerCt.getSize().height-cpt.ownerCt.getTopToolbar().getSize().height)}
      }
    });

    xl.affiliate.wrapperPanel = new Ext.Panel({
      width:"100%"
      ,items:[xl.affiliate.mainTabPanel]
      ,tbar:[
        {
          xtype:"tbtext"
          ,text:<%= ("Welcome, " + self.current_user.full_name).to_json %>
        }
        ,"->"
        ,{
          text:"Logout"
          ,handler:function(){window.location=<%= logout_affiliate_account_url.to_json %>}
        }
      ]
    });

    Ext.onReady(function(){
      xl.affiliate.wrapperPanel.setHeight(Ext.getBody().getViewSize().height);
      xl.affiliate.wrapperPanel.render("affiliate-account-ui-body");
    });
  </script>

<% end %>
