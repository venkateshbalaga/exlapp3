limit = params[:limit] || 50

after_render = %Q`
  ds.load({params: {start: 0, limit: #{limit} }});
`

page << create_tab_using_ajax_response("ProfileRequests | Index", after_render) do
%Q`

  function alertNoProfileRequestsSelected() {
    Ext.Msg.alert('No Profile Requests Selected', 'Please select one or more profile requests to perform that action.');
  }

  var selectedIds = null;
  
  var profileRequestPath = #{profile_request_path("__ID__").to_json};
  
  var ProfileRequestRecord = new Ext.data.Record.create([
    {name: 'id', mapping: 'id'},
    {name: 'name', mapping: 'name'}, 
    {name: 'company_name', mapping: 'company_name'}, 
    {name: 'created_at', mapping: 'created_at'}, 
    {name: 'approved_at', mapping: 'approved_at'},
    {name: 'avatar_url', mapping: 'avatar_url'},
    {name: 'links', mapping: 'links'},
    {name: 'phones', mapping: 'phones'},
    {name: 'emails', mapping: 'emails'},
    {name: 'tag_list', mapping: 'tag_list'},
    {name: 'addresses', mapping: 'addresses'},
    {name: 'info', mapping: 'info'},
    {name: 'created_by_id', mapping: 'created_by_id'},
    {name: 'created_by_name', mapping: 'created_by_name'},
    {name: 'profile_id', mapping: 'profile_id'},
    {name: 'view_profile', mapping: 'view_profile'},
    {name: 'groups', mapping: 'groups'},
    {name: 'type', mapping: 'type'}
    
  ]);
  // data reader to parse the json response
  var reader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, ProfileRequestRecord);
  
  // set up connection of the data
  var connection = new Ext.data.Connection({url: #{formatted_profile_requests_path(:format => :json).to_json}, method: 'get'});
  var proxy = new Ext.data.HttpProxy(connection);

  // set up the data store and then send request to the server
  var ds = new Ext.data.Store({proxy: proxy, reader: reader, remoteSort: true, baseParams: {q: ''}});
  
    // define paging toolbar that is going to be appended to the footer of the grid panel
  var paging = new Ext.PagingToolbar({
    store: ds,
    pageSize: #{limit},
    displayInfo: true,
    displayMsg: 'Displaying {0} to {1} of {2}',
    emptyMsg: "No record to display",
    cls: "bottom-toolbar paging-toolbar-bottom",
    plugins: [new Ext.ux.PageSizePlugin]
  });
  
  #{create_grid_tbar_filter_field}
  
  #{create_grid_tbar_clear_button}
  
    // create row expander of the grid object
    var expander = new Ext.grid.RowExpander({ contains: ["links", "addresses", "phones", "avatar_url", "info", "groups", "tag_list", "emails"],
      tpl : new Ext.Template(
        '<table><tr><td>',
        '<img src="{avatar_url}"/></td><td>',
        '<div>Phone: {phones}</div>',
        '<div>Addresses: {addresses}</div>',
        '<div>Groups: {groups}</div>',
        '<div>{info}</div>',
        '<div>Tags: {tag_list}</div></td></tr></table>'
      )
    });
  
  var gridTopToolbar = new Ext.Toolbar({
    cls: "top-toolbar",
    items: [{text:"&nbsp;&nbsp;&nbsp;Filter: "}, filterField, clearButton]
  });
  
  var updateProfileRequestPath = #{profile_request_path(:id => "__ID__").to_json};
  
  var grid = new Ext.grid.EditorGridPanel({
      store: ds,
      cm: new Ext.grid.ColumnModel([expander, 
          {id: "type", width: 40, header: "Type", sortable: true, dataIndex: 'type'},
          {id: "name", width: 110, header: "Name", sortable: true, dataIndex: 'name'},
          {id: "company_name", header: "Company Name", sortable: true, dataIndex: 'company_name'},
          {id: "links", header: "Websites", sortable: true, dataIndex: 'links'},
          {id: "emails", header: "Email", sortable: true, dataIndex: 'emails'},
          {id: "created_by_name", header: "Submitted By", sortable: true, dataIndex: 'created_by_name'},
          {id: "created_at", width: 50, header: "Created At", sortable: true, dataIndex: 'created_at'},
          {id: "approved_at", width: 50, header: "Approved At", sortable: true, dataIndex: 'approved_at'},
          {id: "view_profile", width: 40, header: "Profile", sortable: true, dataIndex: 'view_profile'}
        ]),
      autoScroll: true,
      viewConfig: {autoFill: true, forceFit: true},
      autoExpandMin: 150,
      autoWidth: true,
      height: #{get_default_grid_height(nil)},
      clicksToEdit:1,
      tbar: gridTopToolbar, 
      bbar: paging,
      loadMask: true,
      plugins: expander,
      selModel: new Ext.grid.RowSelectionModel
  });
  
  var selectAllAction = new Ext.Action({
    text: "Select all",
    iconCls: "display_none"
  });

  var clearAllAction = new Ext.Action({
    text: "Clear all",
    iconCls: "display_none",
    disabled: true
  });
  
  var approveAction = new Ext.Action({
    text: "Approve",
    iconCls: "display_none",
    disabled: true
  });

  var deleteAction = new Ext.Action({
    text: "Delete",
    iconCls: "display_none",
    disabled: true,
    handler: function() {
      Ext.Msg.confirm("", "Delete selected requests permanently?", function(btn){
        if(btn == "yes"){
          var params = {};
          params['ids'] = selectedIds.toString();
          Ext.Ajax.request({
            url: #{destroy_collection_profile_requests_path.to_json},
            params: params,
            method: "DELETE"
          });
          #{mask_grid_with_key("profile_request", "Deleting...")}
        }
      });
    }
  });
    
  function getSelectedIdsString(records){ 
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id);
    });
    return ids.toString()
  }
  
  var selectionMenu =  new Ext.menu.Menu({
    items: [selectAllAction, clearAllAction]
  });
  selectionMenu.addSeparator();
  selectionMenu.add(approveAction);
  selectionMenu.addSeparator();
  selectionMenu.add(deleteAction);  
  
  clearAllAction.setHandler(function(e) {
    grid.getSelectionModel().clearSelections();
    selectedIds = [];
    e.disable();
  });

  selectAllAction.setHandler(function(e) {
    grid.getSelectionModel().selectAll();
    e.disable();
  });
    
  newPanel.add(grid);
  xl.runningGrids.set("profile_request", grid);
  newPanel.on("destroy", function(){
    xl.runningGrids.unset("profile_request");
  });
  
  var partyEditUrl = #{edit_party_path(:id => "__ID__").to_json};
  grid.on("celldblclick", function(gr, rowIndex, columnIndex, e) {
    var record = ds.getAt(rowIndex);
    var id = record.data.created_by_id
    switch(columnIndex){
      case grid.getColumnModel().getIndexById("created_by_name"):
        xl.openNewTabPanel('parties_edit' + id, partyEditUrl.sub("__ID__", id));
        break;
      default:
        break;
    }
  });

  xl.viewport.render();
  
  approveAction.setHandler(function(e) {
    var records = grid.getSelectionModel().getSelections();
    if (records.length == 0) {
      alertNoProfileRequestsSelected();
      return false;
    }
    
    Ext.Msg.confirm("", "Approved selected profile requests?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        grid.disable();
        params['ids'] = getSelectedIdsString(records);
        new Ajax.Request("#{approve_collection_profile_requests_path}", {
          method: 'post',
          parameters: params,
          onSuccess: function(transport){
            grid.enable();
          }
        });
      }
    });
  });
  grid.getTopToolbar().add({ text: "Actions", menu: selectionMenu });
  
  grid.getSelectionModel().on("selectionchange", function(){
    records = grid.getSelectionModel().getSelections();
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id);
    });
    selectedIds = ids;

    if(ids.length>0){
      clearAllAction.enable();
      approveAction.enable();
      deleteAction.enable();
    }
    else{
      approveAction.disable();
      selectAllAction.enable();
      deleteAction.disable();
    }
  });
`
end

