limit = params[:limit] || 50
estimates_url_json = formatted_estimates_path(:format => :json).to_json

after_render = %Q`
  ds.load({params: {start: 0, limit: #{limit} }});
`

page << create_tab_using_ajax_response("Estimates | Index", after_render) do
%Q`

  // create file record
  var EstimateRecord = new Ext.data.Record.create([
    {name: 'id', mapping: 'id'},
    {name: 'number', mapping: 'number'},
    {name: 'date', mapping: 'date'},
    {name: 'shipping_method', mapping: 'shipping_method'},
    {name: 'status', mapping: 'status'},
    {name: 'care_of_name', mapping: 'care_of_name'},
    {name: 'created_by_name', mapping: 'created_by_name'},
    {name: 'updated_by_name', mapping: 'updated_by_name'},
    {name: 'sent_by_name', mapping: 'sent_by_name'},
    {name: 'confirmed_by_name', mapping: 'confirmed_by_name'},
    {name: 'completed_by_name', mapping: 'completed_by_name'}, 
    {name: 'invoiced_to_name', mapping: 'invoiced_to_name'}, 
    {name: 'subtotal', mapping: 'subtotal'}, 
    {name: 'total', mapping: 'total'},
    {name: 'distance', mapping: 'distance'}

  ]);
  
  // data reader to parse the json response
  var reader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, EstimateRecord);

  // set up connection of the data
  var connection = new Ext.data.Connection({url: #{estimates_url_json}, method: 'get'});
  var proxy = new Ext.data.HttpProxy(connection);

  // set up the data store and then send request to the server
  var ds = new Ext.data.Store({proxy: proxy, reader: reader, remoteSort: true, baseParams: {q: ''}});

  // set up the ext grid object
  var xg = Ext.grid;

  // define paging toolbar that is going to be appended to the footer of the grid panel
  var paging = new Ext.PagingToolbar({
    store: ds,
    pageSize: #{limit},
    displayInfo: true,
    displayMsg: 'Displaying {0} to {1} of {2}',
    emptyMsg: "No record to display",
    cls: "bottom-toolbar paging-toolbar-bottom",
    plugins: [new Ext.ux.PageSizePlugin]
  });

  var statusStore = new Ext.data.SimpleStore({
    fields: ['value'],
    data: [#{estimate_status_selections}]
  });
  
  var idSelection = xl.widget.FormField({
      displayField: 'value', 
      valueField: 'value',
      fieldLabel: 'Status',
      value: 'All', 
      name: 'status', 
      type: 'combobox', 
      store: statusStore, 
      editable : false,
      triggerAction: 'all',
      mode: 'local'
  });
  
  idSelection.on('select', function(el, newValue, oldValue){
    ds.reload({params: {status: newValue.data.value, start: 0, limit: #{limit}}});
  });
  
  #{create_grid_tbar_filter_field}
  
  #{create_grid_tbar_clear_button}
  
  var gridTopToolbar = new Ext.Toolbar({
    cls:"top-toolbar"
    ,items:[
      {text:"New", handler:function(){xl.openNewTabPanel('estimates_new_nil', #{new_estimate_path.to_json})}}
      ,idSelection
      ,{text:"&nbsp;&nbsp;&nbsp;Filter: ", xtype:"tbtext"}
      ,filterField
      ,clearButton
    ]
  });
  
  // create GridPanel object
  var grid = new Ext.grid.GridPanel({
    store: ds,
    cm: new xg.ColumnModel([
        {header: "No", width: 70, sortable: true, dataIndex: 'number'}, 
        {header: "Date", width: 70, sortable: true, dataIndex: 'date'}, 
        {header: "Shipping Method", width: 100, sortable: true, dataIndex: 'shipping_method'}, 
        {header: "Status", width: 70, sortable: true, dataIndex: 'status'}, 
        {header: "Invoiced to", width: 100, sortable: true, dataIndex: 'invoiced_to_name'}, 
        {header: "Care of", width: 100, sortable: true, dataIndex: 'care_of_name'}, 
        {header: "Created by", width: 100, sortable: true, dataIndex: 'created_by_name'}, 
        {header: "Updated by", width: 100, sortable: true, dataIndex: 'updated_by_name'}, 
        {header: "Sent by", width: 100, sortable: true, dataIndex: 'sent_by_name'}, 
        {header: "Confirmed by", width: 100, sortable: true, dataIndex: 'confirmed_by_name'}, 
        {header: "Completed by", width: 100, sortable: true, dataIndex: 'completed_by_name'},
        {header: "Sub-total", width: 100, sortable: true, dataIndex: 'subtotal'},
        {header: "Total", width: 100, sortable: true, dataIndex: 'total'},
        {header: "Distance", width: 100, sortable: true, dataIndex: 'distance', hidden: true},
      ]),
    viewConfig: {
      forceFit: true
    },
    autoScroll: true,
    autoWidth: true,
    height: #{get_default_grid_height(nil)},
    tbar: gridTopToolbar,
    bbar: paging,
    footer: true,
    loadMask: true,
    iconCls: 'icon-grid'
  });
  
  newPanel.add(grid);
  xl.runningGrids.set("estimates", grid);
  newPanel.on("destroy", function(){
    xl.runningGrids.unset("estimates");
  });

  var editEstimateUrl = #{edit_estimate_path(:id => "__ID__").to_json};
  // set double click action on grid cells
  grid.on("celldblclick", function(gr, rowIndex, columnIndex, e) {
    var record = ds.getAt(rowIndex);
    var id = record.data.id;

    switch(columnIndex){
      default:
        xl.openNewTabPanel(('estimates_edit_'+id), editEstimateUrl.sub("__ID__", id));
    }
  });
  
  var selectAllAction = new Ext.Action({
    text: "Select all",
    iconCls: "display_none"
  });

  var clearAllAction = new Ext.Action({
    text: "Clear all",
    iconCls: "display_none",
    disabled: true
  });
  
  var deleteAction = new Ext.Action({
    text: "Delete",
    iconCls: "display_none",
    disabled: true
  });
  
  var changeStatusAction = new Ext.Action({
    text: "Change estimate status",
    iconCls: "display_none",
    disabled: true
  });
  
  var selectionMenu =  new Ext.menu.Menu({
    items: [selectAllAction, clearAllAction]
  });
  
  selectionMenu.addSeparator();
  selectionMenu.add(changeStatusAction);
  selectionMenu.addSeparator();
  selectionMenu.add(deleteAction);
  
  xl.viewport.render();

  grid.getTopToolbar().add({ text: "Actions", menu: selectionMenu });

  function alertNoEstimatesSelected() {
    Ext.Msg.alert('No Estimates Selected', 'Please select one or more estimates to perform that action.');
  }

  function getSelectedIdsString(records){ 
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id);
    });
    return ids.toString()
  }
  
  clearAllAction.setHandler(function(e) {
    grid.getSelectionModel().clearSelections();
    e.disable();
  });

  selectAllAction.setHandler(function(e) {
    grid.getSelectionModel().selectAll();
    e.disable();
  });

  deleteAction.setHandler(function(e) {
    var records = grid.getSelectionModel().getSelections();
    if (records.length == 0) {
      alertNoEstimatesSelected();
      return false;
    }
    
    Ext.Msg.confirm("", "Delete selected estimates permanently?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        grid.disable();
        params['ids'] = getSelectedIdsString(records);
        new Ajax.Request(#{destroy_collection_estimates_path.to_json}, {
          method: 'post',
          parameters: params,
          onSuccess: function(transport){
            grid.enable();
          }
        });
      }
    });
  });
  
  grid.getSelectionModel().on("selectionchange", function(){
    records = grid.getSelectionModel().getSelections();
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id);
    });
    selectedIds = ids;
    
    if(ids.length>0){
      clearAllAction.enable();
      deleteAction.enable();
    }
    else
      deleteAction.disable();
      selectAllAction.enable();
  });
  
`
end
