afteredit_function = %Q`
  function(oldValue, decodedResponse, plainResponse, me){
    xl.updateStatusBar(decodedResponse.flash);
    if(decodedResponse.success){
      #{refresh_grid_datastore_of("blog")};
    }    
  }
`

after_render = self.set_active_tab

limit = params[:limit] || 50

ext_fields_for(:blog, @blog) do |f|

page << create_tab_using_ajax_response("Edit Blog | #{truncate(@blog.title, 10)}", after_render) do
%Q`
  var form = {url: #{blog_path(@blog).to_json}, object: 'blog'};

  #{render_tags_panel("blog[tag_list]", @blog, current_account.blogs.tags, {}, {:collapsible => false, :title => ""})}

  var authorNameField = xl.widget.InlineActiveField({
    form: form,
    afteredit: #{afteredit_function},
    field: {
      fieldLabel: "Author name",
      labelSeparator: ":",
      name: "author_name",
      grow: true,
      growMin: 150,
      value: #{@blog.author_name.to_json}
    }
  });
      
  // set up connection and data store of autocomplete field
  var partyNameAutoCompleteRecord = new Ext.data.Record.create([
    {name: 'display', mapping: 'display'},
    {name: 'name', mapping: 'value'},
    {name: 'id', mapping: 'id'}
  ]);

  var partyNameAutoCompleteReader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, partyNameAutoCompleteRecord)
  var partyNameAutoCompleteConnection = new Ext.data.Connection({url: #{formatted_auto_complete_party_field_listings_path(:format => :json).to_json}, method: 'get'});
  var partyNameAutoCompleteProxy = new Ext.data.HttpProxy(partyNameAutoCompleteConnection)
  var partyNameAutoCompleteStore = new Ext.data.Store({proxy: partyNameAutoCompleteProxy, reader: partyNameAutoCompleteReader});
  
  var ownerAutoCompleteField = xl.widget.InlineActiveField({
    form: form,
    field: {
      type: 'combobox',
      name: "owner_id",
      store: partyNameAutoCompleteStore,
      displayField: 'display',
      valueField: 'id',
      hiddenName: "blog[owner_id]",
      fieldLabel: "Owner",
      triggerAction: 'all',
      forceSelection: true,
      emptyText: "Autocomplete field, please start typing",
      hideTrigger:true,
      minChars: 0,
      width: 480,
      allowBlank: false,
      value: #{(@blog.owner ? @blog.owner.display_name : "").to_json},
      listeners: {
          "change": function(comboBox, newValue, oldValue){
            var partyName = partyNameAutoCompleteStore.getById(newValue).get("name");
            var oldValue = authorNameField.getValue();
            authorNameField.setValue(partyName);
            authorNameField.fireEvent("change", authorNameField, partyName, oldValue);
          }
        }
    }
  });

  var approvalMethodSelectionStore = new Ext.data.SimpleStore({
    fields: ['value'],
    data: [['Always approved'], ['Moderated'], ['No Comments']]
  });

  var approvalMethodSelectionField = new Ext.form.ComboBox({
    name: "blog[comment_approval_method]",
    displayField: 'value',
    valueField: 'value',
    fieldLabel: 'Comment Approval Method',
    triggerAction: 'all',
    mode: 'local',
    allowBlank: false,
    forceSelection: true,
    editable: false,
    store: approvalMethodSelectionStore,
    value: #{(@blog.comment_approval_method || "Moderated").to_json}  
  });

  var fieldsPanel = new Ext.Panel({
    layout: "form",
    labelWidth: 160,
    items: [
      {html: '<div class="notices" id="#{dom_id(@blog)}_errorMessages"/>'},
      #{f.text_field :title, :label => "Title", :grow => true, :growMin => 150, :afteredit => afteredit_function},
      #{f.text_field :subtitle, :label => "Subtitle", :grow => true, :growMin => 150, :afteredit => afteredit_function},
      xl.widget.InlineActiveField({
        form: form,
        afteredit: #{afteredit_function},
        field: {
          fieldLabel: "Label",
          labelSeparator: ":",
          name: "label",
          grow: true,
          growMin: 150,
          value: #{@blog.label.to_json}
        }
      }),
      ownerAutoCompleteField,
      authorNameField,
      xl.widget.InlineActiveField({
        form: form,
        afteredit: #{afteredit_function},
        field: {
          type:'combobox',
          name: "comment_approval_method",
          displayField: 'value',
          valueField: 'value',
          fieldLabel: 'Comment Approval Method',
          triggerAction: 'all',
          mode: 'local',
          allowBlank: false,
          forceSelection: true,
          editable: false,
          store: approvalMethodSelectionStore,
          value: #{(@blog.comment_approval_method || "Moderated").to_json}  
        }
      })
    ]
  });
  
  var tagsPanelWrapper = new Ext.Panel({
    title: "Tags",
    items: [tagsPanel]
  });
  
  #{self.initialize_groups_access_panel}
  
  var mainInfoPanel = new Ext.Panel({
    autoScroll: true,
    items: [fieldsPanel, tagsPanelWrapper, groupsFileTreePanel]
  });
  
  ////////////////////////////////////// CREATING POSTS GRID ///////////////////////////////////////////////

  var postPath = #{blog_post_path("__ID__").to_json};
  
  // create file record
  var PostRecord = new Ext.data.Record.create([
    {name: 'id', mapping: 'id'},
    {name: 'title', mapping: 'title'},
    {name: 'excerpt', mapping: 'excerpt'},
    {name: 'body', mapping: 'body'},
    {name: 'author_name', mapping: 'author_name'},
    {name: 'comments_count', mapping: 'comments_count'},
    {name: 'unapproved_comments_count', mapping: 'unapproved_comments_count'},    
    {name: 'author_id', mapping: 'author_id'},
    {name: 'published_at', mapping: 'published_at'},
    {name: 'created_at', mapping: 'created_at'}
  ]);
  
  // data reader to parse the json response
  var reader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, PostRecord);

  // set up connection of the data
  var connection = new Ext.data.Connection({url: #{formatted_blog_posts_path(:blog_id => @blog.id, :format => :json).to_json}, method: 'get'});
  var proxy = new Ext.data.HttpProxy(connection);

  // set up the data store and then send request to the server
  var ds = new Ext.data.Store({proxy: proxy, reader: reader, remoteSort: true, baseParams: {q: ''}});
  ds.load({params: {start: 0, limit: #{limit} }});

  // set up the ext grid object
  var xg = Ext.grid;

  // define paging toolbar that is going to be appended to the footer of the grid panel
  var paging = new Ext.PagingToolbar({
    store: ds,
    pageSize: #{limit},
    displayInfo: true,
    displayMsg: 'Displaying {0} to {1} of {2}',
    emptyMsg: "No record to display",
    cls: "bottom-toolbar paging-toolbar-bottom",
    plugins: [new Ext.ux.PageSizePlugin]
  });
  
  #{create_grid_tbar_filter_field}
  
  #{create_grid_tbar_clear_button}

  var selectAllAction = new Ext.Action({
    text: "Select all",
    iconCls: "display_none"
  });

  var clearAllAction = new Ext.Action({
    text: "Clear all",
    iconCls: "display_none",
    disabled: true
  });
  
  var approveCommentsAction = new Ext.Action({
    text: "Approve comment(s)",
    iconCls: "display_none",
    disabled: true
  });
  
  var deleteAction = new Ext.Action({
    text: "Delete",
    iconCls: "display_none",
    disabled: true
  });
  
  var selectionMenu =  new Ext.menu.Menu({
    items: [selectAllAction, clearAllAction]
  });
  
  selectionMenu.addSeparator();
  selectionMenu.add(approveCommentsAction);
  selectionMenu.addSeparator();
  selectionMenu.add(deleteAction);

  var gridTopToolbar = new Ext.Toolbar({
    cls: "top-toolbar",
    items: [
      {xtype:"tbtext", text:"&nbsp;&nbsp;&nbsp;Filter: "}
      ,filterField
      ,clearButton
      ,{ text: "Actions", menu: selectionMenu }
    ]
  });
  
  var editRenderer = function(value, cell, record) {
    return '<div class="icon_pencilGo pointerOnHover"/>';
  };
  
  var grid = new Ext.grid.EditorGridPanel({
      store: ds,
      cm: new Ext.grid.ColumnModel([
          {id: "edit", width: 35, dataIndex: 'id', renderer: editRenderer, sortable: false, menuDisabled: true, hideable: false, tooltip: "Click here to go to full edit mode" },
          {id: "blog-post-title", width: 300, header: "Title", sortable: true, dataIndex: 'title', editor: new Ext.form.TextField()},
          {id: "blog-post-author_name", width: 200, header: "Author name", sortable: true, dataIndex: 'author_name'},
          {id: "blog-post-excerpt", width: 300, header: "Excerpt", sortable: true, dataIndex: 'excerpt'},
          {id: "blog-post-comments_count", width: 20, header: "Comments", hidden: true, dataIndex: 'comments_count'},
          {id: "blog-post-created_at", width: 200, header: "Created at", sortable: true, dataIndex: 'created_at'},
          {id: "blog-post-published_at", width: 200, header: "Published at", sortable: true, dataIndex: 'published_at'},
          {id: "blog-post-unapproved_comments_count", width: 80, header: "Unapproved comments", dataIndex: 'unapproved_comments_count'}
        ]),
      autoScroll: true,
      width: "100%",
      clicksToEdit:2,
      tbar: gridTopToolbar, 
      bbar: paging,
      selModel: new Ext.grid.RowSelectionModel,
      viewConfig: { autoFill: true, forceFit: true},
      autoExpandColumn: "blog-post-excerpt",
      height: #{get_default_grid_height(nil)}-61
  });
  
  grid.doNotSyncSize = true;
  Ext.EventManager.onWindowResize(function() {grid.setWidth(xl.centerPanel.getInnerWidth());});
  Ext.EventManager.onWindowResize(function() {grid.setHeight(xl.centerPanel.getInnerHeight());});
  
  var postsPanel = new Ext.Panel({
    items: [grid]
  });
  
  xl.runningGrids.set("blog_posts_#{@blog.id}", grid);
  postsPanel.on("destroy", function(){
    xl.runningGrids.unset("blog_posts_#{@blog.id}");
  });
  
  var editPostUrl = #{edit_blog_post_path(:id => "__ID__").to_json};
  // set double click action on grid cells
  grid.on("cellclick", function(gr, rowIndex, columnIndex, e) {
    var record = ds.getAt(rowIndex);
    var id = record.data.id;

    switch(columnIndex){
      case grid.getColumnModel().getIndexById("edit"):
        xl.openNewTabPanel('blog_posts_edit_'+id, editPostUrl.sub("__ID__", id));
        break;
      default:
        break;
    }
  });
  
  grid.on("celldblclick", function(gr, rowIndex, columnIndex, e) {
    var record = ds.getAt(rowIndex);
    var id = record.data.id;

    switch(columnIndex){
      case grid.getColumnModel().getIndexById("blog-post-unapproved_comments_count"):
        xl.openNewTabPanel('blog_posts_edit_'+id, editPostUrl.sub("__ID__", id), {"open":"comments"}, "blog_posts_edit_"+id+"_inside_comments");
        break;
      default:
        break;
    }
  });
  
  
    
  ///////////////////////////////////////END CREATING POSTS GRID//////////////////////////////////////////  
  
  var tabPanelTbar = new Ext.Toolbar({
    items: [
      {
        text: "New Post", 
        handler: function(btn, event){
          Ext.Ajax.request({
            url: #{new_blog_post_path(:blog_id => @blog.id).to_json}
          });
        }
      }
      ,"->"
      ,{text: #{"Editing #{@blog.title}".to_json}, xtype:"tbtext"}
    ]
  });
  
  var tabPanel = new Ext.TabPanel({
    activeTab: 0,
    tbar: tabPanelTbar,
    tabPosition: "bottom",
    items: [
      {title: "Main Info", autoScroll: true, items: [mainInfoPanel], listeners: {show: function(panel){xl.viewport.render();}} },
      {id: #{self.generate_inside_tab_panel_id(:posts).to_json}, title: "Posts", items: [postsPanel], listeners: {show: function(panel){xl.viewport.render();}} },
      {title: "Collaborators", autoScroll: true, items: [{html: "Under construction"}], listeners: {show: function(panel){xl.viewport.render();}} }
    ]
  });

  xl.runningInsideTabs.set(#{self.create_id_from_params.to_json}, tabPanel);
  tabPanel.on("destroy", function(){
    xl.runningInsideTabs.unset(#{self.create_id_from_params.to_json});
  });

  newPanel.add(tabPanel);
  
  xl.viewport.render();

  function alertNoPostsSelected() {
    Ext.Msg.alert('No Posts Selected', 'Please select one or more posts to perform that action.');
  }

  function getSelectedIdsString(records){ 
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id);
    });
    return ids.toString()
  }

  clearAllAction.setHandler(function(e) {
    grid.getSelectionModel().clearSelections();
    e.disable();
  });

  selectAllAction.setHandler(function(e) {
    grid.getSelectionModel().selectAll();
    e.disable();
  });
  
  approveCommentsAction.setHandler(function(e){
    var records = grid.getSelectionModel().getSelections();
    if (records.length == 0){
      alertNoPostsSelected();
      return false;
    }
    
    Ext.Msg.confirm("", "Approve all comments of selected blog posts?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        grid.disable();
        params['blog_ids'] = getSelectedIdsString(records);
        new Ajax.Request(#{approve_comments_blog_path(@blog).to_json}, {
          method: 'post',
          parameters: params,
          onSuccess: function(transport){
            grid.enable();
          }
        });
      }
    });
  });

  deleteAction.setHandler(function(e) {
    var records = grid.getSelectionModel().getSelections();
    if (records.length == 0) {
      alertNoPostsSelected();
      return false;
    }
    
    Ext.Msg.confirm("", "Delete selected posts permanently?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        grid.disable();
        params['ids'] = getSelectedIdsString(records);
        new Ajax.Request(#{destroy_collection_blog_posts_path.to_json}, {
          method: 'post',
          parameters: params,
          onSuccess: function(transport){
            grid.enable();
          }
        });
      }
    });
  });
  
  grid.getSelectionModel().on("selectionchange", function(){
    records = grid.getSelectionModel().getSelections();
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id);
    });
    
    if(ids.length>0){
      clearAllAction.enable();
      approveCommentsAction.enable();
      deleteAction.enable();
    }
    else {
      approveCommentsAction.disable();
      deleteAction.disable();
      selectAllAction.enable();
    }
  });
  
  grid.on("validateedit", function(event){
    var record = event.record;
    var editedFieldName = event.field;
    
    record.set(editedFieldName, event.value);
    var method = "put";
    var objectId = record.get("id");

    var params = {};
    params["from_index"] = "true";
    params["post[title]"] = record.get("title");
    
    new Ajax.Request(postPath.sub("__ID__", objectId),{
      method: method,
      parameters: params,
      onSuccess: function(transport){
        response = Ext.util.JSON.decode(transport.responseText);
        record.set('id', response.id);
        record.set('title', response.title);
        xl.updateStatusBar(response.flash);
        if(response.flash.include('Error saving post:'))
          event.grid.getView().getCell(event.row, event.column).highlight({startcolor: "FF5721"});
        else
          event.grid.getView().getCell(event.row, event.column).highlight();
      }
    });
  });
`
end

end
