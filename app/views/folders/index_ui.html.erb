<% limit = params[:limit] || 50 %>
<% foldersUrl = formatted_folders_path(:format => :json).to_json %>
var Example = {
  init : function(){
    Ext.state.Manager.setProvider(new Ext.state.CookieProvider());
  
    // create file record
    var FileRecord = new Ext.data.Record.create([
      {name: 'label', mapping: 'label'},
      {name: 'type', mapping: 'type'},
      {name: 'folder', mapping: 'folder'},
      {name: 'size', mapping: 'size'},
      {name: 'path', mapping: 'path'},
      {name: 'notes', mapping: 'notes'},
      {name: 'tags', mapping: 'tags'},
      {name: 'created_at', mapping: 'created_at'},
      {name: 'updated_at', mapping: 'updated_at'},
      {name: 'url', mapping: 'url'}      
    ]);

    // data reader to parse the json response
    var reader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, FileRecord);

    // set up connection of the data
    var connection = new Ext.data.Connection({url: <%= foldersUrl %>, method: 'get'});
    var proxy = new Ext.data.HttpProxy(connection);
    
    // set up the data store and then send request to the server
    var ds = new Ext.data.Store({proxy: proxy, reader: reader, remoteSort: true, baseParams: {q: ''}});
    ds.load({params: {start: 0, limit: <%= limit %> }});
    
    // set up the ext grid object
    var xg = Ext.grid;

    // create row expander of the grid object
    var expander = new xg.RowExpander({ contains: ["notes", "tags", "updated_at", "created_at"],
      tpl : new Ext.Template(
        '<table><tr><td>',
        '<img src="{url}"/></td><td>',
        '<div>{notes}</div>',
        '<div>Tags: {tags}</div>',
        '<div>Updated at: {updated_at}</div>',
        '<div>Created at: {created_at}</div></td></tr></table>'        
      )
    });

    // define paging toolbar that is going to be appended to the footer of the grid panel
    var paging = new Ext.PagingToolbar({
      store: ds,
      pageSize: <%= limit %>,
      displayInfo: true,
      displayMsg: 'Displaying {0} to {1} of {2}',
      emptyMsg: "No record to display",
      cls: "paging-toolbar-bottom",
      plugins: [new Ext.ux.PageSizePlugin]
    });

    // create filter field to be appended as the top grid toolbar
    var filterField = new Ext.form.TextField({selectOnFocus: true, grow: false, emptyText: "Search"});
    filterField.on("specialkey",
      function(field, e) {
        if (e.getKey() == Ext.EventObject.RETURN || e.getKey() == Ext.EventObject.ENTER) {
          e.preventDefault();
          ds.baseParams['q'] = this.getValue();
          ds.reload({params: {start: 0, limit: <%= limit %>}});
        }
      }
    );      

    // clear button for the filter field
    var clearButton = new Ext.Toolbar.Button({
      text: 'Clear', 
      handler: function() {
        filterField.setValue("");
        ds.baseParams['q'] = "";
        ds.reload();
      }
    });

    // create GridPanel object
    var grid = new Ext.grid.GridPanel({
      store: ds,
      cm: new xg.ColumnModel([ expander,
          {header: "Label", width: 250, sortable: true, dataIndex: 'label'},
          {header: "Type", width: 125, sortable: true, dataIndex: 'type'},
          {header: "Size", width: 75, sortable: true, dataIndex: 'size'},
          {header: "Folder", width: 100, sortable: true, dataIndex: 'folder'},
          {id: 'file-manager-path', header: "Path", width: 140, sortable: true, dataIndex: 'path'}
        ]),
      viewConfig: {
        forceFit: false
      },
      plugins: expander,
      autoScroll: true,
      autoWidth: true,
      autoExpandColumn: 'file-manager-path',
      height: <%= get_default_grid_height %>,
      tbar: [
        "Filter: ", 
        filterField, 
        clearButton
      ],
      bbar: [paging],
      footer: true,
      iconCls: 'icon-grid',
      renderTo: document.body
    });    
    
    parent.xl.runningGrids.set("assets", grid);

    grid.getTopToolbar().addClass("top-toolbar");
    grid.getBottomToolbar().addClass("bottom-toolbar");
    
    var selectAllAction = new Ext.Action({
      text: "Select all",
      iconCls: "display_none"
    });

    var clearAllAction = new Ext.Action({
      text: "Clear all",
      iconCls: "display_none",
      disabled: true
    });

    var createFeedAction = new Ext.Action({
      text: "Create feed",
      iconCls: "display_none",
      disabled: true
    });
    
    var downloadAction = new Ext.Action({
      text: "Download",
      iconCls: "display_none",
      disabled: true
    });    

    var sendAttachmentAction = new Ext.Action({
      text: "Send attachment(s)",
      iconCls: "display_none",
      disabled: true
    });    

    var sendSecureLinkAction = new Ext.Action({
      text: "Send secure link",
      iconCls: "display_none",
      disabled: true
    });    

    var uploadAction = new Ext.Action({
      text: "Upload",
      iconCls: "display_none",
      disabled: true
    });    

    var deleteAction = new Ext.Action({
      text: "Delete",
      iconCls: "display_none",
      disabled: true
    });    
    
    var selectionMenu =  new Ext.menu.Menu({
      items: [selectAllAction, clearAllAction]
    });
    selectionMenu.addSeparator();
    selectionMenu.add(createFeedAction, downloadAction, sendAttachmentAction, sendSecureLinkAction, uploadAction);
    selectionMenu.addSeparator();
    selectionMenu.add(deleteAction);
    
    grid.getTopToolbar().add({ id: 'selection-menu', text: "Actions", menu: selectionMenu });    

    var expandAllAction = new Ext.Action({
      text: "Expand all",
      disabled: true
    });    

    var collapseAllAction = new Ext.Action({
      text: "Collapse all",
      disabled: true
    });
    
    //SET HANDLERS
        
    selectAllAction.setHandler(function(e) {
      grid.getSelectionModel().selectAll();
      e.disable();
    });
    
    clearAllAction.setHandler(function(e) {
      grid.getSelectionModel().clearSelections();
      e.disable();
    });
    
    grid.getSelectionModel().on("selectionchange", function(){
      records = grid.getSelectionModel().getSelections();
      var ids = new Array();
      records.each( function(e) {
        ids.push(e.data.id);
      });
      selectedIds = ids;
  
      if(ids.length>0){
        clearAllAction.enable();
        deleteAction.enable();
      }
      else
        deleteAction.disable();
    });
    
    grid.getTopToolbar().add(expandAllAction, collapseAllAction);
  }  
};

Ext.onReady(Example.init, Example);
