limit = params[:limit] || 50

after_render = %Q`
  ds.load({params: {start: 0, limit: #{limit} }});
`

page << create_tab_using_ajax_response("Pages | Index", after_render) do
%Q`

  var selectedIds = null;
  
  var pagePath = #{page_path("__ID__").to_json};
  
  var domainStore = new Ext.data.SimpleStore({
    fields: ['value'],
    data: #{([["All"]] + @source_domains.map{|domain| [domain.name]}).to_json}
  });
  
  var domainSelection = xl.widget.FormField({
      displayField: 'value', 
      valueField: 'value',
      fieldLabel: 'Status',
      value: 'All', 
      name: 'domain', 
      type: 'combobox', 
      store: domainStore, 
      editable : false,
      triggerAction: 'all',
      mode: 'local'
  });
  
  var PageRecord = new Ext.data.Record.create([
    {name: 'id', mapping: 'id'},
    {name: 'title', mapping: 'title'}, 
    {name: 'status', mapping: 'status'}, 
    {name: 'behavior', mapping: 'behavior'}, 
    {name: 'fullslug', mapping: 'fullslug'},
    {name: 'domain_patterns', mapping: 'domain_patterns'},
    {name: 'layout', mapping: 'layout'},
    {name: 'updator_id', mapping: 'updator'},
    {name: 'updated_at', mapping: 'updated_at'},
    {name: 'no_update', mapping: 'no_update'},
    {name: 'domains', mapping: 'domains'}
  ]);
  // data reader to parse the json response
  var reader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, PageRecord);
  
  // set up connection of the data
  var connection = new Ext.data.Connection({url: #{formatted_pages_path(:format => :json).to_json}, method: 'get'});
  var proxy = new Ext.data.HttpProxy(connection);

  // set up the data store and then send request to the server
  var ds = new Ext.data.Store({proxy: proxy, reader: reader, remoteSort: true, baseParams: {q: ''}});
  
    // define paging toolbar that is going to be appended to the footer of the grid panel
  var paging = new Ext.PagingToolbar({
    store: ds,
    pageSize: #{limit},
    displayInfo: true,
    displayMsg: 'Displaying {0} to {1} of {2}',
    emptyMsg: "No record to display",
    cls: "bottom-toolbar paging-toolbar-bottom",
    plugins: [new Ext.ux.PageSizePlugin]
  });
  
  domainSelection.on('select', function(el, newValue, oldValue){
    ds.baseParams['domain'] = newValue.data.value;
    ds.reload({params: {start: 0, limit: ds.lastOptions.params.limit}});
  });
  
  #{create_grid_tbar_filter_field}
  
  #{create_grid_tbar_clear_button}

  var gridTopToolbar = new Ext.Toolbar({
    cls: "top-toolbar",
    items: [
      {text:"New", handler:function(){xl.openNewTabPanel('pages_new_nil', #{new_page_path.to_json})}}
      ,{xtype:"tbtext", text: "Show Domain:"}
      ,domainSelection
      ,{xtype:"tbtext", text:"&nbsp;&nbsp;&nbsp;Filter: "}
      ,filterField
      ,clearButton
    ]
  });

  var statusStore = new Ext.data.SimpleStore({
    fields: ['value','id'],
    data: #{Page::STATUSES_FOR_SELECT.map(&:to_a).to_json}
  });
  
  var statusComboBox = new Ext.form.ComboBox({
    store: statusStore,
    displayField: 'value',
    valueField: 'id',
    triggerAction: 'all',
    minChars: 0,
    allowBlank: false, 
    editable: false,
    mode: 'local'
  });

  var layoutsStore = xl.generateSimpleHttpJSONStore({
    fieldNames: ['value','id'],
    url: '#{async_get_selection_layouts_path}',
    autoLoad: false,
    doLoad: false
  });
  
  var layoutsComboBox = new Ext.form.ComboBox({
    store: layoutsStore,
    displayField: 'value',
    valueField: 'value',
    triggerAction: 'all',
    minChars: 0,
    minListWidth: 200,
    resizable: true,
    allowBlank: false, 
    editable: false,
    mode: 'remote',
    listeners: {
      'expand': function(me){
        me.store.reload();
      }
    }
  });

  var pagePath = #{page_path(:id => "__ID__").to_json};
  var noUpdateCheckColumn = new Ext.grid.CheckColumn({
    id: 'no_update', 
    header: "No update",
    dataIndex: 'no_update',
    width: 60,
    fixed: true,
    inputValue: 1
  });
  noUpdateCheckColumn.addListener("click", function(column, event, record){
    var no_update_flag = "0";
    if(record.get("no_update")){
      no_update_flag = "1";
    }
    Ext.Ajax.request({
      url:pagePath.replace(new RegExp("__ID__"), record.get("id")),
      params:{"page[no_update_flag]":no_update_flag, "from_index":"1"},
      method:"put"
    });
  });
  
  var addChildRenderer = function(value, cell, record) {
    return '<a href="#">Add Child</a>';
  };
  
  var editRenderer = function(value, cell, record) {
    return '<div class="icon_pencilGo pointerOnHover"/>';
  };
  
  var grid = new Ext.grid.EditorGridPanel({
      store: ds,
      cm: new Ext.grid.ColumnModel([
          {id: "edit", width: 30, dataIndex: 'id', renderer: editRenderer, sortable: false, menuDisabled: true, hideable: false, tooltip: "Click here to go to full edit mode" },
          {id: "title", header: "Title", sortable: true, dataIndex: 'title', 
            renderer: function(value, meta, record){
              var slug = record.get('fullslug')
              if(slug.length == 0)
                return value;
              var level = slug.split("/").length;
              var display_title = "";
              for(i=0; i < level; i++)
                display_title = display_title.concat("&nbsp;&nbsp;");
              display_title = display_title.concat(value);
              return display_title;
            }, 
            editor: new Ext.form.TextField()
          },
          {id: "status", header: "Status", width: 70, sortable: true, dataIndex: 'status', editor: statusComboBox},
          {id: "behavior", hidden: true, header: "Behavior", sortable: true, dataIndex: 'behavior'},
          {id: "layout", header: "Layout", sortable: true, dataIndex: 'layout', editor: layoutsComboBox},
          {id: "fullslug", width: 150, header: "Slug", sortable: true, dataIndex: 'fullslug', editor: new Ext.form.TextField()},
          {id: "domain_patterns", width: 120, header: "Domain Pattern", sortable: true, dataIndex: 'domain_patterns', editor: new Ext.form.TextArea({listeners: {'focus': function(me){me.setWidth(250);}}})},
          {id: "updated_at", hidden: true, header: "Updated at", sortable: true, dataIndex: 'updated_at'},
          {id: "updator", hidden: true, header: "Updated By", sortable: true, dataIndex: 'updator_id'},
          {id: "domains", width: 140, header: "View on Domain", sortable: false, dataIndex: 'domains'},
          {id: "add_child", dataIndex: 'id',  width: 65, header: "Add child", sortable: false, renderer: addChildRenderer},
          noUpdateCheckColumn
        ]),
      autoScroll: true,
      autoExpandColumn: 'title',
      autoExpandMin: 150,
      autoWidth: true,
      height: #{get_default_grid_height(nil)},
      plugins:noUpdateCheckColumn,
      clicksToEdit:1,
      tbar: gridTopToolbar, 
      bbar: paging,
      loadMask: true,
      selModel: new Ext.grid.RowSelectionModel
  });
  
  var selectAllAction = new Ext.Action({
    text: "Select all",
    iconCls: "display_none"
  });

  var clearAllAction = new Ext.Action({
    text: "Clear all",
    iconCls: "display_none",
    disabled: true
  });
  
  var deleteAction = new Ext.Action({
    text: "Delete",
    iconCls: "display_none",
    disabled: true
  });
  
  var duplicateAction = new Ext.Action({
    text: "Duplicate",
    iconCls: "display_none",
    disabled: true
  });
  
  var toSnippetAction = new Ext.Action({
    text: "To Snippet"
    ,iconCls: "display_none"
    ,disabled: true
  });
  
  var embedCodeAction = new Ext.Action({
    text: "Embed code",
    iconCls: "display_none",
    disabled: true
  });
  
  var selectionMenu =  new Ext.menu.Menu({
    items: [selectAllAction, clearAllAction]
  });
  
  selectionMenu.addSeparator();
  selectionMenu.add(duplicateAction, embedCodeAction, toSnippetAction);
  selectionMenu.addSeparator();
  selectionMenu.add(deleteAction);
  
  clearAllAction.setHandler(function(e) {
    grid.getSelectionModel().clearSelections();
    selectedIds = [];
    e.disable();
  });

  selectAllAction.setHandler(function(e) {
    grid.getSelectionModel().selectAll();
    e.disable();
  });
  
  duplicateAction.setHandler(function(e) {
    var params = {};
    params['id'] = selectedIds.toString();
    new Ajax.Request(#{new_page_path.to_json}, {
      method: 'get',
      parameters: params
    });
  });
  
  deleteAction.setHandler(function(e) {
    Ext.Msg.confirm("", "Delete selected pages permanently?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        params['ids'] = selectedIds.toString();
        new Ajax.Request(#{destroy_collection_pages_path.to_json}, {
          method: 'post',
          parameters: params
        });
      }
    });
  });
  
  var refreshRequest = function(msgtext, params){
    Ext.Msg.confirm("Cache Refresh", msgtext, function(btn){
      if (btn.match(new RegExp("yes","i"))){
        Ext.Ajax.request({
          url:#{refresh_cached_pages_pages_path.to_json}
          ,method:"POST"
          ,params:params
          ,success:function(response,options){
            var response = Ext.decode(response.responseText);
            if(response.success){
              Ext.Msg.alert("Cache Refresh", "Your request has been placed on the queue.");
            }
          }
          ,failure:function(){
            Ext.Msg.alert("Cache Refresh", "Request FAILED. Please try again later. If problem persists contact XLsuite admin.");
          }
        })      
      }
    });
  };
  
  var cacheRefreshMenu = new Ext.menu.Menu({
    items:[
      new Ext.Action({
        text: "All"
        ,iconCls: "display_none"
        ,handler:function(){
          refreshRequest("Refresh all cached pages. Are you sure?", {"all":"1"});
        }
      })
      ,new Ext.Action({
        text: "Stylesheets"
        ,iconCls: "display_none"
        ,handler:function(){
          refreshRequest("Refresh all cached stylesheet pages. Are you sure?", {"stylesheets":"1"});
        }
      })
      ,new Ext.Action({
        text: "Javascripts"
        ,iconCls: "display_none"
        ,handler:function(){
          refreshRequest("Refresh all cached javascript pages. Are you sure?", {"javascripts":"1"});
        }
      })
    ]
  });
  
  var embedCodePagePath = #{embed_code_page_path(:id => "__ID__").to_json};
  embedCodeAction.setHandler(function(e) {
    var selectedId = selectedIds.first();
    Ext.Ajax.request({
      url: embedCodePagePath.sub("__ID__", selectedId),
      method: "GET"
    });
  });
  
  var toSnippetPagesPath = #{convert_to_snippet_pages_path.to_json}
  toSnippetAction.setHandler(function(e){
    Ext.Ajax.request({
      url:toSnippetPagesPath
      ,params:{"ids":selectedIds.join(",")}
      ,method:"POST"
      ,success:function(response,options){
        var response = Ext.decode(response.responseText);
        if(response.success){
          Ext.Msg.alert("Page to snippet", "All pages successfully converted to snippets. A snippet title is its page fullslug prepended with /");
        }else{
          Ext.Msg.alert("Page to snippet | ERROR", "Not all pages were successfully converted. Failed items: " + response.failed_pages.join(", "));
        }
      }
    })
  });
  
  newPanel.add(grid);
  xl.runningGrids.set("page", grid);
  newPanel.on("destroy", function(){
    xl.runningGrids.unset("page");
  });
  
  var editPageUrl = #{edit_page_path(:id => "__ID__").to_json};
  grid.on("cellclick", function(gr, rowIndex, columnIndex, e) {
    var record = ds.getAt(rowIndex);
    var id = record.data.id;
    switch(columnIndex){
      case grid.getColumnModel().getIndexById("add_child"):
        xl.openNewTabPanel('pages_new_nil', '/admin/pages/new?parent_id='+id);
        break;
      case grid.getColumnModel().getIndexById("edit"):
        xl.openNewTabPanel('pages_edit_'+id, editPageUrl.sub("__ID__", id));
        break;
      default:
        break;
    }
  });

  xl.viewport.render();
  
  grid.getTopToolbar().add({ text: "Actions", menu: selectionMenu });
  grid.getTopToolbar().add({text:"Cache Refresh", menu: cacheRefreshMenu});
  
  grid.getSelectionModel().on("selectionchange", function(){
    records = grid.getSelectionModel().getSelections();
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id);
    });
    selectedIds = ids;

    if(ids.length>0){
      clearAllAction.enable();
      deleteAction.enable();
      toSnippetAction.enable();
      if(ids.length==1) {
        duplicateAction.enable();
        embedCodeAction.enable();
      }
      else{
        duplicateAction.disable();
        embedCodeAction.disable();
      }
    }
    else{
      deleteAction.disable();
      selectAllAction.enable();
      duplicateAction.disable();
      embedCodeAction.disable();
      toSnippetAction.disable();
    }
  });

  grid.on("validateedit", function(event){
    var record = event.record;
    var editedFieldName = event.field;
    
    record.set(editedFieldName, event.value);
    var method = "put";
    var objectId = record.get("id");

    var params = {};
    if(editedFieldName == "fullslug")
      params["refresh"] = "true";
    params["from_index"] = "true";
    params["page[title]"] = record.get("title");
    params["page[status]"] = record.get("status");
    params["page[behavior]"] = record.get("behavior");
    params["page[layout]"] = record.get("layout");
    params["page[fullslug]"] = record.get("fullslug");
    params["page[domain_patterns]"] = record.get("domain_patterns");
    
    new Ajax.Request(pagePath.sub("__ID__", objectId),{
      method: method,
      parameters: params,
      onSuccess: function(transport){
        response = Ext.util.JSON.decode(transport.responseText);
        record.set('id', response.id);
        record.set('title', response.title);
        record.set('status', response.status);
        record.set('behavior', response.behavior);
        record.set('layout', response.layout);
        record.set('fullslug', response.fullslug);
        record.set('domain_patterns', response.domain_patterns);
        record.set('domains', response.domains);
        $("status-bar-notifications").innerHTML = response.flash;
        if(response.flash.include('Error:'))
          event.grid.getView().getCell(event.row, event.column).highlight({startcolor: "FF5721"});
        else
          event.grid.getView().getCell(event.row, event.column).highlight();
        if(response.refresh)
          grid.getStore().reload();
      }
    });

  });
`
end

