limit = params[:limit] || 50
accounts_url_json = formatted_accounts_path(:format => :json).to_json

after_render = %Q`
  ds.load({params: {start: 0, limit: #{limit} }});
`

page << create_tab_using_ajax_response("Accounts | Index", after_render) do
%Q`
  var selectedIds = null;

  // create entity record
  var AccountRecord = new Ext.data.Record.create([
    {name: 'id', mapping: 'object_id'},
    {name: 'owner_name', mapping: 'owner_name'},
    {name: 'owner_email', mapping: 'owner_email'},
    {name: 'domain_names', mapping: 'domain_names'},
    {name: 'expires_at', mapping: 'expires_at'},
    {name: 'amount', mapping: 'amount'}
  ]);

  // data reader to parse the json response
  var reader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, AccountRecord);

  // set up connection of the data
  var connection = new Ext.data.Connection({url: #{accounts_url_json}, method: 'get'});
  var proxy = new Ext.data.HttpProxy(connection);

  // set up the data store and then send request to the server
  var ds = new Ext.data.Store({proxy: proxy, reader: reader, remoteSort: true, baseParams: {q: ''}});

  // set up the ext grid object
  var xg = Ext.grid;

  // define paging toolbar that is going to be appended to the footer of the grid panel
  var paging = new Ext.PagingToolbar({
    store: ds,
    pageSize: #{limit},
    displayInfo: true,
    displayMsg: 'Displaying {0} to {1} of {2}',
    emptyMsg: "No record to display",
    cls: "bottom-toolbar paging-toolbar-bottom",
    plugins: [new Ext.ux.PageSizePlugin]
  });
  
  #{create_grid_tbar_filter_field}
  
  #{create_grid_tbar_clear_button}

  var showingComboBox = new Ext.form.ComboBox({
    store:[["all", "All"], ["1", "First level"], ["2", "Second level"], ["3", "Third level"]]
    ,forceSelection:true
    ,triggerAction:"all"
    ,editable:false
    ,listeners:{
      "select":function(cpt, record, index){
        ds.baseParams["level"] = record.get("value");
        ds.reload();
      }
    }
    ,value:"all"
    ,width:100
  });

  var gridTopToolbar = new Ext.Toolbar({
    cls:"top-toolbar"
    ,items:[
      "Showing:"
      ,showingComboBox
      ,{xtype:"tbtext", text:"&nbsp;&nbsp;&nbsp;Filter: "}
      ,filterField
      ,clearButton
    ]
  });

  // create GridPanel object
  var grid = new Ext.grid.GridPanel({
    store: ds,
    cm: new xg.ColumnModel([
        {header: "Name", width: 125, sortable: false, dataIndex: 'owner_name'},
        {header: "Email", width: 100, sortable: false, dataIndex: 'owner_email'},
        {id:"account-domains", header: "Domains", width: 150, sortable: false, dataIndex: 'domain_names'},
        {header: "Expires at", width: 75, sortable: true, dataIndex: 'expires_at'},
        {header: "Amount", width: 75, sortable: false, dataIndex: 'amount'}
      ]),
    viewConfig: {
      forceFit: true
    },
    autoScroll: true,
    autoWidth: true,
    height: #{get_default_grid_height(nil)},
    tbar: gridTopToolbar,
    bbar: paging,
    footer: true,
    loadMask: true,
    iconCls: 'icon-grid'
  });

  newPanel.add(grid);
  xl.runningGrids.set("accounts", grid);
  newPanel.on("destroy", function(){
    xl.runningGrids.unset("accounts");
  });

  var editAccountUrl = #{edit_account_path(:id => "__ID__").to_json};
  // set double click action on grid cells
  grid.on("celldblclick", function(gr, rowIndex, columnIndex, e) {
    var record = ds.getAt(rowIndex);
    var id = record.data.id.split("_").last();

    xl.createTab(editAccountUrl.sub("__ID__", id));
  });

  var selectAllAction = new Ext.Action({
    text: "Select all",
    iconCls: "display_none"
  });

  var clearAllAction = new Ext.Action({
    text: "Clear all",
    iconCls: "display_none",
    disabled: true
  });

  var printSummaryAction = new Ext.Action({
    text: "Print Summary",
    iconCls: "display_none",
    disabled: true
  });

  var deleteAction = new Ext.Action({
    text: "Delete",
    iconCls: "display_none",
    disabled: true
  });

  var resendConfirmationAction = new Ext.Action({
    text: "Resend confirmation",
    iconCls: "display_none",
    disabled: true
  });

  var expandAllAction = new Ext.Action({
    text: "Expand all",
    disabled: true
  });

  var collapseAllAction = new Ext.Action({
    text: "Collapse all",
    disabled: true
  });

  var selectionMenu =  new Ext.menu.Menu({
    items: [selectAllAction, clearAllAction]
  });
  selectionMenu.addSeparator();
  selectionMenu.add(printSummaryAction);
  selectionMenu.add(resendConfirmationAction);
  selectionMenu.addSeparator();
  selectionMenu.add(deleteAction);

  xl.viewport.render();
  grid.getTopToolbar().add({ text: "Actions", menu: selectionMenu });

  clearAllAction.setHandler(function(e) {
    grid.getSelectionModel().clearSelections();
    selectedIds = [];
    e.disable();
  });

  selectAllAction.setHandler(function(e) {
    grid.getSelectionModel().selectAll();
    e.disable();
  });

  deleteAction.setHandler(function(e) {
    Ext.Msg.confirm("", "Delete selected account(s) permanently?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        params['ids'] = selectedIds.toString();
        grid.el.mask("Deleting account(s)...");
        Ext.Ajax.request({
          url: #{destroy_collection_accounts_path.to_json},
          method: 'post',
          params: params,
          success: function(response, options){
            grid.el.unmask();
          }
        });
      }
    });
  });

  resendConfirmationAction.setHandler(function(e) {
    Ext.Msg.confirm("", "Resend confirmation to the selected accounts?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        params['ids'] = selectedIds.toString();
        
        Ext.Ajax.request({
          url: #{resend_confirmation_accounts_path.to_json},
          params: params,
          method: 'post',
          success: function(transport, options){
            response = Ext.util.JSON.decode(transport.responseText);
            if(response.success){
              Ext.Msg.alert('Success', response.message);
              grid.getStore().reload();
            }
            else
              Ext.Msg.alert('Failure', 'No account confirmations were sent out; All accounts are activated');
          },
          failure: function(transport, options){
            Ext.Msg.alert('Failure', "There was an error during execution. #{Time.now()}");
          }
        });
      }
    });
  });

  grid.getSelectionModel().on("selectionchange", function(){
    records = grid.getSelectionModel().getSelections();
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id.split("_").last());
    });
    selectedIds = ids;

    if(ids.length>0){
      selectionMenu.items.each(function(e) {e.enable();});
      printSummaryAction.disable();
    }
    else{
      selectionMenu.items.each(function(e) {e.disable();});
      selectAllAction.enable();
    }
  });
`
end
