limit = params[:limit] || 50
api_keys_url_json = formatted_api_keys_path(:format => :json).to_json

after_render = %Q`
  ds.load({params: {start: 0, limit: #{limit} }});
`

partyNameComboBox = %Q!
  new Ext.form.ComboBox({
    store: partyNameAutoCompleteStore,
    displayField: 'display',
    valueField: 'value',
    hideLabel: true,
    triggerAction: 'all',
    forceSelection: true,
    emptyText: "Autocomplete field, please start typing",
    minChars: 0,
    width: 480,
    allowBlank: false
  });
!

page << create_tab_using_ajax_response("ApiKeys", after_render) do
%Q`
  var selectedIds = null;

  /****** BEGIN: Party Name Auto-Complete */
  // set up connection and data store of autocomplete field
  var partyNameAutoCompleteRecord = new Ext.data.Record.create([
    {name: 'display', mapping: 'display'},
    {name: 'value', mapping: 'value'}
  ]);
  
  var partyNameAutoCompleteReader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, partyNameAutoCompleteRecord)
  var partyNameAutoCompleteConnection = new Ext.data.Connection({url: #{formatted_extjs_auto_complete_parties_path(:format => :json).to_json}, method: 'get'});
  var partyNameAutoCompleteProxy = new Ext.data.HttpProxy(partyNameAutoCompleteConnection)
  var partyNameAutoCompleteStore = new Ext.data.Store({proxy: partyNameAutoCompleteProxy, reader: partyNameAutoCompleteReader});
  /****** END: Party Name Auto-Complete */

  // create file record
  var ApiKeyRecord = new Ext.data.Record.create([
    {name: 'id', mapping: 'object_id'},
    {name: 'key', mapping: 'key'},
    {name: 'party_name', mapping: 'party_name'}
  ]);

  // data reader to parse the json response
  var reader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, ApiKeyRecord);

  // set up connection of the data
  var connection = new Ext.data.Connection({url: #{api_keys_url_json}, method: 'get'});
  var proxy = new Ext.data.HttpProxy(connection);

  // set up the data store and then send request to the server
  var ds = new Ext.data.Store({proxy: proxy, reader: reader, remoteSort: true, baseParams: {q: ''}});

  // set up the ext grid object
  var xg = Ext.grid;

  // define paging toolbar that is going to be appended to the footer of the grid panel
  var paging = new Ext.PagingToolbar({
    store: ds,
    pageSize: #{limit},
    displayInfo: true,
    displayMsg: 'Displaying {0} to {1} of {2}',
    emptyMsg: "No record to display",
    cls: "bottom-toolbar paging-toolbar-bottom",
    plugins: [new Ext.ux.PageSizePlugin]
  });

  #{create_grid_tbar_filter_field}
  
  #{create_grid_tbar_clear_button}

  var gridTopToolbar = new Ext.Toolbar({
    cls: "top-toolbar",
    items: [
      {text:"New", handler:function(){xl.openNewTabPanel('api_keys_new_nil', #{new_api_key_path.to_json})}}
      ,{xtype:"tbtext", text:"&nbsp;&nbsp;&nbsp;Filter: "}
      ,filterField
      ,clearButton
    ]
  });

  // create GridPanel object
  var grid = new Ext.grid.GridPanel({
    store: ds,
    cm: new xg.ColumnModel([
        {header: "ID", width: 100, sortable: false, dataIndex: 'id'},
        {header: "Party", width: 350, sortable: true, dataIndex: 'party_name'},
        {header: "Key", width: 250, sortable: true, dataIndex: 'key'}
      ]),
    viewConfig: {
      forceFit: false
    },
    autoScroll: true,
    autoWidth: true,
    height: #{get_default_grid_height(nil)},
    tbar: gridTopToolbar,
    bbar: paging,
    footer: true,
    loadMask: true,
    iconCls: 'icon-grid'
  });

  newPanel.add(grid);
  xl.runningGrids.set("products", grid);
  newPanel.on("destroy", function(){
    xl.runningGrids.unset("products");
  });

  var editApiKeyUrl = #{edit_api_key_path(:id => "__ID__").to_json};
  // set double click action on grid cells
  grid.on("celldblclick", function(gr, rowIndex, columnIndex, e) {
    var record = ds.getAt(rowIndex);
    var id = record.data.id.split("_").last();

    switch(columnIndex){
      default:
        xl.openNewTabPanel(('api_keys_edit_'+id), editApiKeyUrl.sub("__ID__", id));
    }
  });

  var selectAllAction = new Ext.Action({
    text: "Select all",
    iconCls: "display_none"
  });

  var clearAllAction = new Ext.Action({
    text: "Clear all",
    iconCls: "display_none",
    disabled: true
  });

  var revokeAction = new Ext.Action({
    text: "Revoke",
    iconCls: "display_none",
    disabled: true
  });

  var expandAllAction = new Ext.Action({
    text: "Expand all",
    disabled: true
  });

  var collapseAllAction = new Ext.Action({
    text: "Collapse all",
    disabled: true
  });

  var grantAccessAction = new Ext.Action({
    text: "Grant...",
    iconCls: "display_none"
  });

  var selectionMenu =  new Ext.menu.Menu({
    items: [selectAllAction, clearAllAction]
  });
  selectionMenu.addSeparator();
  selectionMenu.add(grantAccessAction);
  selectionMenu.add(revokeAction);

  xl.viewport.render();
  grid.getTopToolbar().add({ text: "Actions", menu: selectionMenu });
  grid.getTopToolbar().add(expandAllAction, collapseAllAction);

  clearAllAction.setHandler(function(e) {
    grid.getSelectionModel().clearSelections();
    selectedIds = [];
    e.disable();
  });

  selectAllAction.setHandler(function(e) {
    grid.getSelectionModel().selectAll();
    e.disable();
  });

  grantAccessAction.setHandler(function(e) {
      var partyNameComboBox = #{partyNameComboBox}

      var win = new Ext.Window({
        title: "Enter the name or E-Mail address of the person you wish to grant an API key",
        modal: true,
        layout:'form',
        width: 500,
        autoHeight:true,
        closeAction: 'hide',
        plain: true,
        items: [ partyNameComboBox ],
        buttons: [{
          text:'Submit',
          handler: function(){
            var party_id = partyNameComboBox.value;
            xl.log("party_id: " + party_id);
            Ext.Ajax.request({
              url: #{api_keys_path.to_json},
              method: "POST",
              params: { "party_id": party_id },
              failure: xl.logXHRFailure,
              success: function(request, options) {
                xl.log("SUCCESS: " + request.responseText);
                var data = Ext.util.JSON.decode(request.responseText);
                $("status-bar-notifications").innerHTML = data.flash;
                grid.getStore().reload();
              } // end success(r,o)
            }); // end Ext.Ajax.request
            win.hide();
          }
      },{
          text: 'Close',
          handler: function(){
              win.hide();
          }
        }]
      });
      
      win.show();
    });

  revokeAction.setHandler(function(e) {
    Ext.Msg.confirm("", "Revoke access for the selected parties immediately?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        params['ids'] = selectedIds.toString();
        new Ajax.Request(#{destroy_collection_api_keys_path.to_json}, {
          method: 'delete',
          parameters: params
        });
      }
    });
  });

  grid.getSelectionModel().on("selectionchange", function(){
    var records = grid.getSelectionModel().getSelections();
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id.split("_").last());
    });
    selectedIds = ids;

    if(ids.length>0){
      selectionMenu.items.each(function(e) {e.enable();});
    }
    else{
      selectionMenu.items.each(function(e) {e.disable();});
      selectAllAction.enable();
    }
  });
`
end
