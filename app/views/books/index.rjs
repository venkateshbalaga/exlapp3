limit = params[:limit] || 50
books_url_json = formatted_books_path(:format => :json).to_json
underbarLinks = '' #link_to_function("New Publishing&hellip;&nbsp;&nbsp;&nbsp;", "openNewWindow()")

page << create_tab_using_ajax_response("Publishings | List View") do
%Q`

/***************
 ** FUNCTIONS **
 ***************/
var openNewWindow = function(button, event) {
  var nameField = new Ext.form.TextField({
    fieldLabel: 'Name',
    allowBlank: false
  });
  var isbnField = new Ext.form.TextField({
    fieldLabel: 'ISBN',
    allowBlank: true,
    value: '978-0-8266-'
  });
  
  var errorPanel = new Ext.Panel({
    html: ''
  });
  
  var window = new Ext.Window({
    autoHeight: true,
    width: 250,
    header: false,
    headerAsText: false,

    plain: true,
    floating: true,
    shadow: true,
    //hideBorders: true,
    //border: false,
    //bodyBorder: false,
    constrain: true,
    
    closable: false,
    collapsibe: false,
    draggable: false,
    maximizable: false,
    minimizable: false,
    resizable: false,
    modal: false,

    items: [
      {
        html: '<p>Enter the book name and, optionally, the ISBN:</p><br />'
      },
      {
        layout: 'form',
        labelWidth: 50,
        labelAlign: 'right',
        items: [nameField, isbnField]
      },
      errorPanel
    ],

    defaultButton: 1,
    buttons: [
      {
        text: 'Cancel',
        handler: function() {
          window.close(); // This destroys it
        }
      },
      {
        text: 'Create',
        handler: function() {
          
          var params = {};
          params['book[name]'] = nameField.getValue();
          params['book[isbn]'] = isbnField.getRawValue();
          
          Ext.Ajax.request({
            url: #{async_create_books_path.to_json},
            params: params,
            method: 'post',
            success: function(transport) {
              var response = Ext.util.JSON.decode(transport.responseText);
              if (typeof parseInt(id) == 'number') {
                window.close();
                store.reload();
                openEditTabPanelWithId(response);
              } else {
                errorPanel.html = response;
                errorPanel.render();
              }
            } // end success()
          }); // end Ext.Ajax.request
        } // end handler
      } // end Add Button
    ]
  });

  window.setPagePosition(event.getXY()[0] + 10, event.getXY()[1] + 10);
  window.show();
};

var openEditTabPanelWithId = function(id) {
  var editUrl = #{edit_book_path(:id => "__ID__").to_json}.sub('__ID__', id);
  xl.openNewTabPanel( 'book_edit_' + id, editUrl);
};

var editActionRenderer = function(value, cell, record, row, col, store) {
  if (value != 0)
    return '<div class="icon_pencilGo pointerOnHover"> </div>';
  else
    return '<div class="icon_add pointerOnHover"> </div>';
};

var nameRenderer = function(value, cell, record) {
  if (record.get('id') == 0)
    return '<i>Edit Me To Create New Publishing</i>';
  else
    return value;
};

/*******************
 ** OBJECTS/LOGIC **
 *******************/
var bookShortRecord = new Ext.data.Record.create([
 {name: 'id', type: 'int'},
 {name: 'name'},
 {name: 'isbn'},
 {name: 'language'}
]);
var specialNewRecordBaseData = { id: 0, name: '', isbn: '978-0-8266-', language: '' };

// data reader to parse the json response
var reader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, bookShortRecord);

// set up connection for the data
var proxy = new Ext.data.HttpProxy(new Ext.data.Connection({url: #{books_url_json}, method: 'get'}));

// set up the data store and then send request to the server
var store = new Ext.data.Store({
 //sortInfo: {field: 'id', direction: 'ASC'},
 proxy: proxy,
 reader: reader,
 remoteSort: true,
 baseParams: {q: ''}
});

store.on('load', function(store, records, options) {
  // This must be added immediately after load, because
  // loading clears out the active recordset
  var specialNewRecord = new bookShortRecord(specialNewRecordBaseData);
  store.insert(0, specialNewRecord);
});
store.load({params: {start: 0, limit: #{limit} }});

#{create_grid_tbar_filter_field("store")}

#{create_grid_tbar_clear_button("store")}

function alertNoPublishingSelected() {
  Ext.Msg.alert('No Publishing Selected', 'Please select one or more publishings to perform that action.');
}

var deleteAction = new Ext.Action({
  text: "Delete",
  iconCls: 'display_none',
  disabled: true,
  handler: function(e) { }
});

var gridTopToolbar = new Ext.Toolbar({
  cls: "top-toolbar",
  items: [
    {
      text: 'New Publishing&hellip;',
      handler: openNewWindow
    },
    '-',
    { text:"Filter: " },
    filterField,
    clearButton,
    {
      text: 'Actions',
      menu: new Ext.menu.Menu({
        //defaults: { iconCls: "display_none" },
        
        items: [
          deleteAction
        ] // end items
      }) // end menu
    }
  ] // end items
});

var pagingToolbar = new Ext.PagingToolbar({
  store: store,
  pageSize: #{limit},
  displayInfo: true,
  displayMsg: 'Displaying {0} to {1} of {2}',
  emptyMsg: "No record to display",
  cls: "bottom-toolbar paging-toolbar-bottom",
  plugins: [new Ext.ux.PageSizePlugin]
});

var editRowAction = new Ext.ux.grid.RowAction({ dataIndex: 'id', width: 30, iconCls: 'icon_pencilGo', renderer: editActionRenderer });
editRowAction.on('action',
  function(grid, record, rowIndex, event, response) {
    openEditTabPanelWithId(record.get('id'));
  }
);

// create GridPanel object
var gridPanel = new Ext.grid.EditorGridPanel({
  store: store,
  cm: new Ext.grid.ColumnModel([
    editRowAction,
    {id: 'name', header: "Name", sortable: true, dataIndex: 'name', editor:  new Ext.form.TextField({}), renderer: nameRenderer },
    {id: 'isbn', header: "ISBN", sortable: true, dataIndex: 'isbn', width: 110, editor: new Ext.form.TextField({}) },
    {id: 'language', header: 'Language', sortable: true, dataIndex: 'language', editor: new Ext.form.TextField({}) }
  ]),
  clicksToEdit: 2,
  viewConfig: { forceFit: false },
  autoScroll: true,
  autoWidth: true,
  autoExpandColumn: 'name',
  height: #{get_default_grid_height(nil)},
  tbar: gridTopToolbar,
  bbar: pagingToolbar,
  plugins: editRowAction,
  footer: true
});

gridPanel.on('beforeedit', function(editObject) {
  // Disallow editing of the ISBN and Language
  var fieldName = editObject.grid.getColumnModel().getColumnHeader(editObject.column).toLowerCase();
  // Can't go by just editObject.column because columns can be rearranged
  if (editObject.record.get('id') == 0) {
    if (fieldName == 'isbn' || fieldName == 'language')
      editObject.cancel = true;
  }
});

gridPanel.on('afteredit', function(editObject) {
  var fieldName = editObject.grid.getColumnModel().getColumnHeader(editObject.column).toLowerCase();
  
  // Editing the special new row's name column, so we're actually
  // making a new record
  if (editObject.record.get('id') == 0 && (fieldName == 'name')) {
    var params = {};
    params['book[' + fieldName + ']'] = editObject.value;
    params['book[isbn]'] = '978-0-8266-';
    
    Ext.Ajax.request({
      url: #{async_create_books_path.to_json},
      params: params,
      method: 'post',
      success: function(transport) {
        var response = Ext.util.JSON.decode(transport.responseText);
        if (typeof response == 'number') {
          // Reset the name column back to "New Publishing"
          editObject.record.reject(true);
          store.load();
          openEditTabPanelWithId(response);
        } else {
          // Alert or something
        }
      } // end success()
    }); // end Ext.Ajax.request
  } else {
    var params = {}, key = 'book[' + fieldName + ']';
    params[key] = editObject.value;

    // Make the request to update the data db-side, and the response
    // is the confirmation
    var updateUrl = #{update_book_path(:id => '__ID__').to_json}.sub('__ID__', editObject.record.get('id'));
    new Ajax.Request(updateUrl, {
      method: 'put',
      parameters: params,
      onFailure: xl.logXHRFailure,
      onSuccess: function(transport) {
        response = Ext.util.JSON.decode(transport.responseText);
        xl.log('Setting ' + key + ' = ' + editObject.value + ' (was "' + editObject.originalValue + '")');
        editObject.record.set('value', response);
      }
    });
  }
});

/*gridPanel.on("celldblclick", function(grid, rowIndex, columnIndex, e) {
  var id = grid.getStore().getAt(rowIndex).get('id');
  // Make sure it's not the special new record
  if (id != 0) openEditTabPanelWithId(id);
});*/

newPanel.add(gridPanel);
xl.runningGrids.set("publishings_list_view", gridPanel);
newPanel.on("destroy", function(){ xl.runningGrids.unset("publishings_list_view"); });
`
end
