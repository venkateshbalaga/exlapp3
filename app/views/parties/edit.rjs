memberships_and_permissions_panels = ""
memberships_and_permissions_tabpanels = ""
if current_user.can?(:edit_party_security)
  memberships_and_permissions_panels << self.initialize_memberships_panel
  memberships_and_permissions_panels << self.initialize_permissions_panel
  
  memberships_and_permissions_tabpanels = %Q`
    ,{title: "Memberships", items:[membershipsPanel], listeners: {show: function(panel){xl.viewport.render();}} }
    ,{title: "Permissions", items:[permissionsPanel], listeners: {show: function(panel){xl.viewport.render();}} }
  `
end

tab_panel_title = @party.name.to_s.strip
tab_panel_title = "Contact | Edit" if tab_panel_title.blank?

conversations_with_url_json = formatted_conversations_with_emails_path(:format => :json, :party_id => @party.id).to_json

page << create_tab_using_ajax_response(tab_panel_title) do
%Q`
  #{self.initialize_contact_details_panel}

  #{self.initialize_contact_routes_panel}

  #{memberships_and_permissions_panels}
  
  #{self.initialize_files_panel}
  
  #{self.initialize_settings_panel}

  #{self.initialize_notes_panel}  
  
  #{self.initialize_testimonials_panel}
  
  #{self.initialize_imap_account_panel}
  

  var EmailRecord = new Ext.data.Record.create([
    {name:'id'},
    {name:'from'},
    {name:'subject_with_body'},
    {name:'date'},
    {name: 'mailbox'},
    {name:'email_account_id'}
  ]);

  var conversationReader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, EmailRecord);
  var conversationProxy = new Ext.data.HttpProxy(new Ext.data.Connection({url:#{conversations_with_url_json}, method:'get'}));
  var conversationStore = new Ext.data.Store({proxy:conversationProxy, reader:conversationReader, remoteSort:false});

  var showEmailPath = #{email_path(:id => "__ID__").to_json};

  var conversationGridPanel = new Ext.grid.GridPanel({
    title:"Conversations",
    store:conversationStore,
    header:false,
    cm: new Ext.grid.ColumnModel([
      {id:"conversation-from", dataIndex:"from", sortable:false, width:200},
      {id:"conversation-subject_with_body", dataIndex:"subject_with_body", sortable:false},
      {id:"conversation-date", dataIndex:"date", sortable:false, width:100}
    ]),
    autoExpandColumn:"conversation-subject_with_body",
    loadMask:true,
    listeners:{
      render:function(cpt){
        cpt.getStore().load({params:{start:0}});
      },
      rowdblclick:function(cpt, rowIndex, event){
        var record = cpt.getStore().getAt(rowIndex);
        Ext.Ajax.request({
          url:showEmailPath.replace(new RegExp("__ID__", "g"), record.get("id")),
          params:{mailbox:record.get("mailbox"), email_account_id:record.get("email_account_id")},
          method:"GET"
        });
      }
    }
  });


////////////////////////////////////// SMTP SETTING //////////////////////////////////////////

  var smtpSetupUsername = new Ext.form.TextField({
    fieldLabel:"Username"
    ,grow:true
    ,growMin:200
    ,value:#{@smtp_account.username.to_json}
  });
  
  var realSmtpServerField = new Ext.form.Hidden({
    value:#{@smtp_account.default_server.to_json}
  });
  
  var fakeSmtpServerField = new Ext.form.TextField({
    fieldLabel:"Server"
    ,value:#{@smtp_account.server.to_json}
    ,listeners:{
      "keyup":function(cpt, event){
        realSmtpServerField.setValue(cpt.getValue());
      }
    }
  });

  var realSmtpPortField = new Ext.form.Hidden({
    value:#{@smtp_account.default_port.to_json}
  });
  
  var fakeSmtpPortField = new Ext.form.TextField({
    fieldLabel:"Port"
    ,value:#{@smtp_account.port.to_json}
    ,listeners:{
      "keyup":function(cpt, event){
        realSmtpPortField.setValue(cpt.getValue());
      }
    }
  });
  
  var fakeSmtpServerPortWrapper = new Ext.Panel({
    layout:"form"
    ,hidden:true
    ,items:[fakeSmtpServerField,fakeSmtpPortField]
  });
  
  var smtpTypeSelection = new Ext.form.ComboBox({
    store:#{SmtpEmailAccount::DEFAULT_SELECTIONS.to_json}
    ,forceSelection:true
    ,editable:false
    ,mode:"local"
    ,triggerAction:"all"
    ,fieldLabel:"Provider"
    ,value:#{@smtp_account.default_server_name.to_json}
    ,listeners:{
      "select":function(cpt, record, index){
        switch(record.get("text")){
          case "Other":
            fakeSmtpServerPortWrapper.show();
            break;
          case "Google Mail":
            fakeSmtpServerPortWrapper.hide();
            realSmtpServerField.setValue("smtp.gmail.com");
            realSmtpPortField.setValue("587");
            break;
        }
      }
    }
  });
  
  var smtpSetupPassword = new Ext.form.TextField({
    fieldLabel:"Password"
    ,grow:true
    ,growMin:200
    ,inputType:"password"
    ,value:#{@smtp_account.password.to_json}
  });
  
  var smtpEmailAccountId = #{@smtp_account.id.to_json};
  
  var smtpTestFunction = function(btn){
    var url = #{test_party_email_account_path(:party_id => @party.id, :id => "__ID__").to_json};
    Ext.Ajax.request({
      url:url.replace("__ID__", smtpEmailAccountId)
      ,method:"GET"
      ,success:function(response,options){
        var response = Ext.decode(response.responseText);
        if(response.success){
          Ext.Msg.alert("SMTP Account Setup", "Proper connection established with your email account")
        }
        else{
          Ext.Msg.alert("SMTP Account Setup - FAILED", response.error)
        }
      }
    });
  }
  
  var smtpSaveButton = new Ext.Toolbar.Button({
    text:"Save"
    ,handler:function(btn){
      var params = {"type":"smtp"};
      var method = "POST";
      var url = #{party_email_accounts_path(:party_id => @party.id).to_json};
      params["email_account[server]"] = realSmtpServerField.getValue();
      params["email_account[port]"] = realSmtpPortField.getValue();
      params["email_account[username]"] = smtpSetupUsername.getValue();
      params["email_account[password]"] = smtpSetupPassword.getValue();
      if(smtpEmailAccountId){
        params["id"] = smtpEmailAccountId;
        method = "PUT"
        url = #{party_email_account_path(:party_id => @party.id, :id => "__ID__").to_json};
        url = url.replace("__ID__", smtpEmailAccountId);
      }
      Ext.Ajax.request({
        url:url
        ,params:params
        ,method:method
        ,success:function(response,options){
          var response = Ext.decode(response.responseText);
          if(response.success){
            smtpEmailAccountId = response.id;
            Ext.Msg.alert("SMTP Account Setup"
              ,"Your SMTP setting has been saved. Your SMTP setting will be validated shortly."
              ,smtpTestFunction
            );
          }
          else{
            Ext.Msg.alert("SMTP Account Setup - FAILED", response.errors.join("<br/>"));
          }
        }
      });
    }
  });
  
  var shareMySmtpButton = new Ext.Toolbar.Button({
    text:"Share SMTP"
    ,tooltip:"Clicking this button will enable you to share your contact SMTP with this contact"
    ,disabled:#{@disable_share_smtp.to_json}
    ,handler:function(btn){
      Ext.Ajax.request({
        url:#{shared_email_accounts_path(:email_account_id => @current_user_smtp_account.id).to_json}
        ,method:"POST"
        ,params:{"target_type":"Party","target_id":#{@party.id.to_json}}
        ,success:function(response,options){
          var response = Ext.decode(response.responseText);
          if(response.success){
            Ext.Msg.alert("SMTP Sharing", "Your SMTP has been successfully shared with this contact");
          }
          else{
            Ext.Msg.alert("SMTP Sharing", response.errors.join("<br/>"));
          }
        }
      })
    }
  });
  
  var smtpTestButton = new Ext.Toolbar.Button({
    text:"Test"
    ,disabled:#{(!@party.own_smtp_account?).to_json}
    ,handler:function(btn){smtpTestFunction(btn)}
  });
  
  var smtpSetupPanel = new Ext.Panel({
    layout:"form"
    ,items:[smtpTypeSelection,fakeSmtpServerPortWrapper,smtpSetupUsername,smtpSetupPassword]
    ,tbar:[smtpSaveButton, smtpTestButton, shareMySmtpButton]
  });
  
  var smtpEmailAccountRolesRootTreeNode =  new Ext.tree.AsyncTreeNode({
    text:"Role - Root"
    ,expanded:true
    ,id:0
  });

  var smtpEmailAccountRolesFileTreePanel = new Ext.tree.TreePanel({
    title:"Sharing with Roles"
    ,columnWidth:.5
    ,root:smtpEmailAccountRolesRootTreeNode
    ,rootVisible: false
    ,disabled:#{!@party.own_smtp_account?.to_json}
    ,autoScroll:true
    ,loader:new Ext.tree.TreeLoader({
      requestMethod: "GET"
      ,url: #{formatted_roles_tree_shared_email_accounts_path(:email_account_id => @smtp_account.id, :format => :json).to_json}
      ,baseAttrs: {uiProvider: Ext.tree.TreeCheckNodeUI}
    })
    ,listeners:{
      check: function(node, checked){
        var url = null;
        var method = null;
        if(checked){
          url = #{shared_email_accounts_path.to_json};
          method = "POST";
        }
        else{
          url = #{remove_shared_email_accounts_path.to_json};
          method = "DELETE";
        }
        Ext.Ajax.request({
          url:url
          ,method:method
          ,params:{target_type:"Role",target_id:node.id,email_account_id:smtpEmailAccountId}
        });
      }
      ,render:function(cpt){
        cpt.setHeight(cpt.ownerCt.ownerCt.getSize().height-smtpSetupPanel.getSize().height);
      }
    }
  });

  var SmtpSharedPartyRecord = new Ext.data.Record.create([
    {name:"id"}
    ,{name:"display_name"}
  ]);

  var smtpSharedPartyReader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, SmtpSharedPartyRecord);
  var smtpSharedPartyConnection = new Ext.data.Connection({url: #{parties_shared_email_accounts_path(:email_account_id => @smtp_account.id).to_json}, method: 'get'});
  var smtpSharedPartyProxy = new Ext.data.HttpProxy(smtpSharedPartyConnection);

  var smtpSharedPartyStore = new Ext.data.Store({
    proxy:smtpSharedPartyProxy 
    ,reader:smtpSharedPartyReader 
    ,remoteSort:false
    ,autoLoad:true
  });
  
  var removeSharedPartyButton = new Ext.Toolbar.Button({
    text:"Remove"
    ,disabled:true
    ,handler:function(btn){
      Ext.Ajax.request({
        url:#{remove_collection_shared_email_accounts_path.to_json}
        ,params:{"target_type":"Party","target_ids":smtpSelectedSharedPartyIds.join(","),"email_account_id":#{@smtp_account.id.to_json}}
        ,method:"DELETE"
        ,success:function(response, options){
          var response = Ext.decode(response.responseText)
          if(response.success){
            smtpSharedPartyStore.reload();
          }
        }
      })
    }
  });
  
  var smtpEmailAccountPartiesTopToolbar = new Ext.Toolbar({
    items:[removeSharedPartyButton]
  });

  var smtpSelectedSharedPartyIds = null;

  var smtpEmailAccountPartiesSelectionModel = new Ext.grid.RowSelectionModel({
    listeners:{
      selectionchange:function(sm){
        var records = sm.getSelections();
        smtpSelectedSharedPartyIds = [];
        for(var i=0;i<records.length;i++){
          smtpSelectedSharedPartyIds.push(records[i].get("id"));
        }
        if(smtpSelectedSharedPartyIds.length>0){
          removeSharedPartyButton.enable();
        }
        else{
          removeSharedPartyButton.disable();
        }
      }
    }
  });
  
  var smtpEmailAccountPartiesGridPanel = new Ext.grid.GridPanel({
    title:"Sharing with contacts"
    ,columnWidth:.5
    ,store:smtpSharedPartyStore
    ,cm:new Ext.grid.ColumnModel([
      {id:"name",header:"Name",dataIndex:"display_name"}
    ])
    ,sm:smtpEmailAccountPartiesSelectionModel
    ,bbar:smtpEmailAccountPartiesTopToolbar
    ,autoExpandColumn:"name"
    ,emptyText:"Not sharing with any contact"
    ,listeners:{
      render:function(cpt){
        cpt.setHeight(cpt.ownerCt.ownerCt.getSize().height-smtpSetupPanel.getSize().height);
      }
    }
  });
  
  var smtpAccountPanel = new Ext.Panel({
    title:"SMTP Setup"
    ,items:[
      smtpSetupPanel, 
      {layout:"column", items:[smtpEmailAccountRolesFileTreePanel, smtpEmailAccountPartiesGridPanel]}
    ]
  });

/////////////////////////////////////////////////////////////////////////////////////////////////////////


  ////////////////////////////////////////////////START OF DOMAIN AVAILABLE GRID//////////////////////////////////////////////////

  var DomainAvailableRecord = new Ext.data.Record.create([
    {name:'domain_name', type:"string"}
    ,{name:'domain_id', type:"int"}
    ,{name:'checked', type:"boolean"}
  ]);
  
  var domainAvailableReader = new Ext.data.JsonReader({totalProperty: "total", root: "collection"}, DomainAvailableRecord);
  var domainAvailableConnection = new Ext.data.Connection({url:"/admin/domain_available_items.json", method:"GET"});
  var domainAvailableProxy = new Ext.data.HttpProxy(domainAvailableConnection);
  
  var domainAvailableStore = new Ext.data.Store({
    proxy:domainAvailableProxy
    ,baseParams:{item_type:"Party", item_id:#{@party.id}}
    ,reader:domainAvailableReader
  });

  var domainAvailableCheckColumn = new Ext.grid.CheckColumn({
    dataIndex: 'checked',
    width: 30
  });

  domainAvailableCheckColumn.addListener("click", function(element, event, record){
    var params = {item_type:"Party", item_id:#{@party.id}, domain_ids:record.get("domain_id")};
    var url = null;
    var method = null;
    if(record.get("checked")){
      url = "/admin/domain_available_items/add_collection";
      method = "POST";
      domainAvailablePanel.el.mask("Processing..."); 
    }
    else{
      url = "/admin/domain_available_items/destroy_collection";
      method = "DELETE";
      domainAvailablePanel.el.mask("Processing..."); 
    }
    Ext.Ajax.request({
      url: url
      ,params: params
      ,method: method
      ,success: function(response, options){
        domainAvailablePanel.el.unmask();
      }
    });
  });
  
  var domainAvailableToolbar = new Ext.Toolbar({
    items:[
      new Ext.Toolbar.Button({
        text:"Clear All"
        ,handler:function(btn){
          domainAvailablePanel.el.mask("Processing...");
          Ext.Ajax.request({
            url:"/admin/domain_available_items/destroy_collection"
            ,params:{all:"1", item_type:"Party", item_id:#{@party.id.to_json}}
            ,method:"DELETE"
            ,success:function(response, options){
              domainAvailablePanel.getStore().reload();
              domainAvailablePanel.el.unmask();
            }
          })
        }
      })
    ]
  });
  
  var domainAvailablePanel = new Ext.grid.GridPanel({
    title:"Available on Domains"
    ,width:350
    ,ds:domainAvailableStore
    ,plugins:domainAvailableCheckColumn
    ,cm:new Ext.grid.ColumnModel([
      domainAvailableCheckColumn
      ,{header:"Domain", dataIndex:"domain_name", width:300}
    ])
    ,bbar:domainAvailableToolbar
    ,listeners:{
      "render":function(cpt){cpt.getStore().load()}
    }
  });
  
  //===============================================END OF DOMAIN AVAILABLE GRID=================================================//  


  var recordMessagesPanel = new Ext.Panel({
    id:"party-#{@party.id}-messages"
    ,title:"Messages"
    ,html:""
    ,autoScroll:true
    ,listeners:{
      render:function(cpt){
        Ext.Ajax.request({
          url:"/admin/emails/show_all_emails"
          ,method:"GET"
          ,params:{"ids":#{@party.id}}
          ,success:function(response){
            var response = Ext.decode(response.responseText);
            cpt.body.update(response.string);
          }
        })
      }
    }
  });

  var tabPanel = new Ext.TabPanel({
    activeTab: 0,
    tabPosition: "bottom",
    layoutOnTabChange: true,
    items:[
      {title: "Contact Details", items:[contactDetailsPanel], autoScroll: true, listeners: {show: function(panel){xl.viewport.render();}} }
      ,contactRoutesPanel
      #{memberships_and_permissions_tabpanels}
      ,{title: "Settings", items:[settingsPanel], listeners: {show: function(panel){xl.viewport.render();}} }
      ,{title: "Files", items:[filesPanel], listeners: {show: function(panel){xl.viewport.render();}} }
      ,noteGridPanel
      ,{title: "Testimonials", items:[testimonialsPanel], listeners: {show: function(panel){xl.viewport.render();}} }
      ,{title: "Organizations", html:"Under development", listeners: {show: function(panel){xl.viewport.render();}} }
      ,imapAccountPanel
      ,smtpAccountPanel
      ,conversationGridPanel
      ,recordMessagesPanel
      ,domainAvailablePanel
    ]
  });

  newPanel.add(tabPanel);
    
  noteGridPanel.setHeight(500);
`
end
if @newly_created
  page << "xl.closeTabPanel('/admin/parties/new-panel');"
  page << refresh_grid_datastore_of("parties")
end
