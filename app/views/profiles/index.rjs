limit = params[:limit] || 50
profilesUrl = formatted_profiles_path(:format => :json).to_json

after_render = %Q`
  ds.load({params: {start: 0, limit: #{limit} }});
`

page << create_tab_using_ajax_response("Profile List", after_render) do
%Q`
  var selectedIds = null;
  var selectedPartyIds = null;

  Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

  // create party record using the party model
  var ProfileRecord = new Ext.data.Record.create([
    {name: 'id', mapping: 'id'},
    {name: 'partyId', mapping: 'party_id'},
    {name: 'displayName', mapping: 'display-name'},
    {name: 'firstName', mapping: 'name.first'},
    {name: 'lastName', mapping: 'name.last'},
    {name: 'company', mapping: 'company-name'},
    {name: 'position', mapping: 'position'},
    {name: 'tags', mapping: 'tags'},
    {name: 'groups', mapping: 'groups'},
    {name: 'email', mapping: 'email-address'},
    {name: 'phone', mapping: 'phone'},
    {name: 'website', mapping: 'link'},
    {name: 'address', mapping: 'address'},
    {name: 'other-addresses', mapping: 'other-addresses'},
    {name: 'other-emails', mapping: 'other-emails'},
    {name: 'other-phones', mapping: 'other-phones'},
    {name: 'other-websites', mapping: 'other-websites'}
  ]);

  // data reader to parse the xml response
  //var reader = new Ext.data.XmlReader({record: 'party', id: '@id', totalRecords: '@total'}, ProfileRecord);
  var reader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, ProfileRecord);

  // set up connection of the data

  var connection = new Ext.data.Connection({url: #{profilesUrl}, method: 'get'});
  var proxy = new Ext.data.HttpProxy(connection);

  // set up the data store and then send request to the server
  var ds = new Ext.data.Store({
    proxy: proxy, 
    reader: reader, 
    remoteSort: true, 
    baseParams: {q: "#{@default_search}"},
    listeners: {"load": function(store, records, options){
      #{unmask_grid_with_key("profiles")}
    }}
  });

  // set up the ext grid object
  var xg = Ext.grid;

  // create row expander of the grid object
  var expander = new xg.RowExpander({ contains: ["position", "address", "referral", "tags"],
    tpl : new Ext.Template(
      '<table width="100%"><col width="50%"><col width="50%"><tr>',
      '<td><div class="row-expander-left">',
      '<div class="other-emails">{other-emails}</div>',
      '<div class="other-phones">{other-phones}</div>',
      '<div class="other-links">{other-websites}</div>',
      '<div class="other-addresses">{other-addresses}</div>',
      '</div></td>',
      '<td><div class="row-expander-right"><p>Groups: {groups}</p></div>',
      '<div class="row-expander-right"><p>{position}</p><p>Tags: {tags}</p></div></td>',
      '</tr></table>'
    )
  });

  // define paging toolbar that is going to be appended to the footer of the grid panel
  var paging = new Ext.PagingToolbar({
    store: ds,
    pageSize: #{limit},
    displayInfo: true,
    displayMsg: 'Displaying {0} to {1} of {2}',
    emptyMsg: "No record to display",
    cls: "paging-toolbar-bottom",
    plugins: [new Ext.ux.PageSizePlugin]
  });
  
  var filterField = new Ext.form.TextField({selectOnFocus: true, grow: false, emptyText: "Search", value: "#{@default_search}"});
  filterField.on("specialkey",
    function(field, e) {
      if (e.getKey() == Ext.EventObject.RETURN || e.getKey() == Ext.EventObject.ENTER) {
        if (this.getValue().length < #{FulltextRow::MINIMUM_QUERY_LENGTH}){
          Ext.Msg.alert("Warning", "Filter term shorter than #{FulltextRow::MINIMUM_QUERY_LENGTH} characters is ignored");
        }
        e.preventDefault();
        ds.baseParams['q'] = this.getValue();
        ds.reload({params: {start: 0, limit: ds.lastOptions.params.limit}});
      }
    }
  );
  
  var clearButton = new Ext.Toolbar.Button({
    text: 'Clear',
    handler: function() {
      filterField.setValue("");
      ds.baseParams['q'] = "";
      ds.reload();
    }
  });

  // create GridPanel object
  var grid = new Ext.grid.GridPanel({
    store: ds,
    cm: new xg.ColumnModel([
        expander,
        {id: 'displayName', header: "Display Name", width: 250, sortable: true, dataIndex: 'displayName'},
        {header: "Company Name", width: 150, sortable: true, dataIndex: 'company', hidden: true},
        {header: "Last Name", width: 150, sortable: true, dataIndex: 'lastName', hidden: true},
        {header: "First Name", width: 125, sortable: true, dataIndex: 'firstName', hidden: true},
        {id: "email", header: "E-Mail", width: 140, sortable: false, dataIndex: 'email'},
        {id: "phone", header: "Phone", width: 140, sortable: false, dataIndex: 'phone'},
        {id: "website", header: "Website", width: 140, sortable: false, dataIndex: 'website'}
      ]),
    viewConfig: {
      forceFit: false
    },
    plugins: expander,
    collapsible: true,
    animCollapse: false,
    autoScroll: true,
    autoWidth: true,
    autoExpandColumn: 'displayName',
    height: #{get_default_grid_height},
    tbar: [
      { text: ""},
      filterField,
      clearButton
    ],
    bbar: paging,
    footer: true,
    loadMask: true,
    iconCls: 'icon-grid'
  });

  newPanel.add(grid);
  xl.runningGrids.set("profiles", grid);
  newPanel.on("destroy", function(){
    xl.runningGrids.unset("profiles");
  });

  // set event on row double click of a row in the grid panel
  var baseUrl = #{edit_profile_path(:id => "__PARTY_ID__").to_json};
  var profileEditUrl = #{edit_profile_path(:id => "__PARTY_ID__").to_json};

  // set double click action on grid cells
  grid.on("celldblclick", function(gr, rowIndex, columnIndex, e) {
    var record = ds.getAt(rowIndex);
    var id = record.get("id");
    var fieldName = grid.getColumnModel().getDataIndex(columnIndex);

    switch(columnIndex){
      case 0:
        break //this is the expander
      case grid.getColumnModel().getIndexById("email"):
        var email_path = #{sandbox_new_emails_path(:email_tos => "__ADDR__").to_json};
        xl.openNewTabPanel('emails_new_nil', email_path.sub("__ADDR__", record.get("email").split(":").last()));
        break;
      case grid.getColumnModel().getIndexById("phone"):
        break;
      case grid.getColumnModel().getIndexById("website"):
        var website_url = record.get("website");
        if ( website_url == "" ) { break };
        if ( !website_url.match(new RegExp("^(ht|f)tp:\/\/", "i")) ) {
          website_url = "http://" + website_url;
        };
        xl.createTab(website_url);
        break;
      default:
        if(record.get("partyId") == 0){
          Ext.Msg.alert("This profile does not belong to any contact records");
        }else{
          xl.openNewTabPanel('profiles_edit_' + id , baseUrl.sub("__PARTY_ID__", record.get("partyId")));
        }
        
    }
  });

  // define per page text field
  var profilesIndexPath = #{profiles_path(:limit => "__LIMIT__").to_json};
  var showPerPageField = new Ext.form.TextField({selectOnFocus: true, grow: false, width: 30, value: #{limit}});
  showPerPageField.on("specialkey",
    function(field, e) {
      if (e.getKey() == Ext.EventObject.RETURN || e.getKey() == Ext.EventObject.ENTER) {
        e.preventDefault();
        iframe.src = profilesIndexPath.sub("__LIMIT__", field.getValue());
      }
    }
  );

  xl.viewport.render();

  //paging.addText("Show ");
  //paging.addSpacer();
  //paging.addField(showPerPageField);
  //paging.addSpacer();
  //paging.addText("per page");
  grid.getTopToolbar().addClass("top-toolbar");
  grid.getBottomToolbar().addClass("bottom-toolbar");


  // menu actions for grid panel

  var selectAllAction = new Ext.Action({
    text: "Select all",
    iconCls: "display_none"
  });

  var clearAllAction = new Ext.Action({
    text: "Clear all",
    iconCls: "display_none",
    disabled: true
  });

  var groupsSelectionStore = new Ext.data.SimpleStore({
    fields: ['display', 'value'],
    data: #{@groups.map{|e| [e.name, e.id]}.to_json}
  });

  var groupsSelectionField = new Ext.form.ComboBox({
    name: "",
    hiddenName: "group_id",
    displayField: 'display',
    valueField: 'value',
    fieldLabel: 'Group',
    triggerAction: 'all',
    mode: 'local',
    allowBlank: false,
    forceSelection: true,
    store: groupsSelectionStore
  });

  var groupsSelectionFormPanel = new Ext.form.FormPanel({
    items: [groupsSelectionField]
  });

  var addToGroupWindow = new Ext.Window({
    title: "Please select a group",
    resizable: false,
    width: 300,
    height: 100,
    closeAction: 'hide',
    items: [groupsSelectionFormPanel],    
    listeners: {
      'hide' : function(p){grid.enable();}
    },
    buttons:[
        {
          text: "Add",
          handler: function() {
              var parameters = {};
              parameters["ids"] = selectedPartyIds.toString();
              groupsSelectionFormPanel.getForm().doAction("submit",
                {
                  url: #{add_collection_to_group_parties_path.to_json},
                  method: "POST",
                  params: parameters
                }
              )
              if(groupsSelectionFormPanel.getForm().isValid()) {
                grid.enable();
                addToGroupWindow.hide();
                addToGroupWindow.close();
              }
            }
        },
        {
          text: 'Close',
          handler: function() {
            grid.enable();
            addToGroupWindow.hide();
            addToGroupWindow.close();
          }
        }
      ]
  });

  var addToGroupAction = new Ext.Action({
    text: "Add to Group",
    iconCls: "display_none",
    disabled: true,
    handler: function() {
      grid.disable();
      addToGroupWindow.show();
    }
  });

  var emailAction = new Ext.Action({
    text: "Email",
    iconCls: "display_none",
    disabled: true,
    handler: function() {
      var records = grid.getSelectionModel().getSelections();
      var email_path = #{sandbox_new_emails_path(:email_tos => "__ADDR__").to_json};
      var email_addresses = [];
      var blank_emails = 0;
      for(i=0;i<records.length;i++){
        if(records[i].get("email") && records[i].get("email") != ""){
          email_addresses.push(records[i].get("email"));
        }
        else{
          blank_emails++;
        }
      }
      email_addresses = email_addresses.join(", ");
      if(email_addresses == ""){
        Ext.Msg.show({
          width: 200,
          msg: "Selected contacts do not have email addresses",
          buttons: Ext.MessageBox.OK
        });
      }
      else {
        if(blank_emails>0){
          Ext.Msg.show({
            width: 200,
            msg: blank_emails + " of selected contacts do not have email addresses",
            buttons: Ext.MessageBox.OK
          });
        }
        xl.openNewTabPanel('emails_new_nil', email_path.sub("__ADDR__", escape(email_addresses)));
      }
    }
  });

  var massMailAction = new Ext.Action({
    text: "Mass Mail",
    iconCls: "display_none",
    disabled: true,
    handler: function() {
      var records = grid.getSelectionModel().getSelections();
      var mass_email_path = #{sandbox_new_emails_path(:email_tos => "__ADDR__", :mass => true).to_json.gsub("amp;", "")};
      var email_addresses = [];
      var blank_emails = 0;
      for(i=0;i<records.length;i++){
        if(records[i].get("email") && records[i].get("email") != ""){
          email_addresses.push(records[i].get("email"));
        }
        else{
          blank_emails++;
        }
      }
      email_addresses = email_addresses.join(", ");
      if(email_addresses == ""){
        Ext.Msg.show({
          width: 200,
          msg: "Selected contacts do not have email addresses",
          buttons: Ext.MessageBox.OK
        });
      }
      else {
        if(blank_emails>0){
          Ext.Msg.show({
            width: 200,
            msg: blank_emails + " of selected contacts do not have email addresses",
            buttons: Ext.MessageBox.OK
          });
        }
        xl.openNewTabPanel('emails_new_nil', (mass_email_path.sub("__ADDR__", escape(email_addresses))));
      }
    }
  });
  
  var printSummaryAction = new Ext.Action({
    text: "Print summary",
    iconCls: "display_none",
    disabled: true
  });

  var tagsSelectionStore = new Ext.data.SimpleStore({
    fields: ['display', 'value'],
    data: #{current_account.profiles.tags.map{|e| [e.name, e.name]}.to_json}
  });

  var tagsSelectionField = new Ext.form.ComboBox({
    name: "tag_list",
    displayField: 'display',
    valueField: 'value',
    fieldLabel: 'Tag',
    triggerAction: 'all',
    mode: 'local',
    allowBlank: false,
    store: tagsSelectionStore
  });

  var tagsSelectionFormPanel = new Ext.form.FormPanel({
    items: [tagsSelectionField]
  });

  var tagWithWindow = new Ext.Window({
    title: "Please select a tag",
    resizable: false,
    width: 300,
    height: 100,
    closeAction: 'hide',
    items: [tagsSelectionFormPanel],
    listeners: {
      'hide' : function(p){grid.enable();}
    },
    buttons:[
        {
          text: "Submit",
          handler: function() {
              var parameters = {};
              parameters["ids"] = selectedIds.toString();
              tagsSelectionFormPanel.getForm().doAction("submit",
                {
                  url: #{tagged_collection_profiles_path.to_json},
                  method: "POST",
                  params: parameters
                }
              )
              if(tagsSelectionFormPanel.getForm().isValid()) {
                grid.enable();
                tagWithWindow.hide();
                tagWithWindow.close();
              }
            }
        },
        {
          text: 'Close',
          handler: function() { grid.enable(); tagWithWindow.hide(); tagWithWindow.close(); }
        }
      ]
  });

  var tagWithAction = new Ext.Action({
    text: "Tag",
    iconCls: "display_none",
    disabled: true,
    handler: function() {
      grid.disable();
      tagWithWindow.show();
    }
  });

  var deleteAction = new Ext.Action({
    text: "Delete",
    iconCls: "display_none",
    disabled: true,
    handler: function() {
      Ext.Msg.confirm("", "Delete selected records permanently?", function(btn){
        if(btn == "yes"){
          var params = {};
          params['ids'] = selectedIds.toString();
          Ext.Ajax.request({
            url: #{destroy_collection_profiles_path.to_json},
            params: params,
            method: "DELETE"
          });
          #{mask_grid_with_key("profiles", "Deleting...")}
        }
      });
    }
  });
  
  var embedCodeProfilePath = #{embed_code_public_profile_path(:id => "__id__").to_json};
  
  var embedCodeAction = new Ext.Action({
    text: "Embed Code",
    iconCls: "display_none",
    handler: function(){
      var records = grid.getSelectionModel().getSelections();
      if(records.length == 1){
        var record = records[0];
          var embedUrl = embedCodeProfilePath.replace(new RegExp("__id__", "g"), record.get("id"));
          Ext.Ajax.request({
            method:"get",
            url:embedUrl,
            success: function(response, options){
              var response = Ext.decode(response.responseText);
              if(response.success){
                var embedCodeTextArea = new Ext.form.TextArea({
                  height: 250,
                  width: 300,
                  value: response.text,
                  listeners: {
                    render : function(cpt){cpt.focus(true, 300);}
                  }
                });
                var embedCodeWindow = new Ext.Window({
                  title: response.title,
                  items: embedCodeTextArea,
                  height: 250,
                  width: 300,
                  resizable: false
                });
                embedCodeWindow.show();
                window.close();
                window.destroy();
              }
              else{
                Ext.Msg.alert("Embed code generator", response.errors.join(", "))
              }
            }
          });
      }
      else{
        Ext.Msg.alert("Embed code generator", "Please select one profile");
      }
    }
  });

  clearAllAction.setHandler(function(e) {
    grid.getSelectionModel().clearSelections();
    selectedIds = new Array();
    selectedPartyIds = new Array();
    e.disable();
  });

  selectAllAction.setHandler(function(e) {
    grid.getSelectionModel().selectAll();
    e.disable();
  });

  var selectionMenu =  new Ext.menu.Menu({
    items: [selectAllAction, clearAllAction]
  });
  selectionMenu.addSeparator();
  selectionMenu.add(addToGroupAction, emailAction, massMailAction, printSummaryAction, tagWithAction, embedCodeAction);
  selectionMenu.addSeparator();
  selectionMenu.add(deleteAction);

  grid.getTopToolbar().add({ text: "Actions", menu: selectionMenu });

  grid.getSelectionModel().on("selectionchange", function(){
    records = grid.getSelectionModel().getSelections();
    var ids = new Array();
    var partyIds = new Array();
    records.each( function(e) {
      ids.push(e.get("id"));
      partyIds.push(e.get("partyId"));
    });
    selectedIds = ids;
    selectedPartyIds = partyIds;

    if(ids.length>0){
      selectionMenu.items.each(function(e) {e.enable();});

      printSummaryAction.disable();
    }
    else{
      selectionMenu.items.each(function(e) {e.disable();});
      selectAllAction.enable();
    }
  });

  //Update messages on rowclick (should be something like selectionchange, but selectionchange
  //sends out too many requests to the server)
  grid.on("selectionChange", function(){

  });

  // Set up "Expand all" and "Collapse all" rows
  var expandAllAction = new Ext.Action({
    text: "Expand all",
    handler: function(){
      Ext.DomQuery.select('.x-grid3-row-collapsed').each (function(e)
        { expander.expandRow(e); }
      );
    }
  });

  var collapseAllAction =  new Ext.Action({
    text: "Collapse all",
    handler: function(){
      Ext.DomQuery.select('.x-grid3-row-expanded').each (function(e)
        { expander.collapseRow(e); }
      );
    }
  });

  grid.getTopToolbar().add(expandAllAction, collapseAllAction);

  ds.on('load', function(datastore, records, options){
    var row_expander_bodies = Ext.DomQuery.select('.x-grid3-row-body');
    var record_id = null;
    for(i=0;i<row_expander_bodies.length;i++){
      record_id = (records[i].get("id"));
      Ext.EventManager.addListener(row_expander_bodies[i], "dblclick", function(event, element, options){
        xl.openNewTabPanel('profiles_edit_' + id , baseUrl.sub("__PARTY_ID__", options.get("partyId")));
      }, this, {recordId:record_id});
    }
  });
`
end
