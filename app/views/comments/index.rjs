limit = params[:limit] || 50

after_render = %Q`
  ds.load({params: {start: 0, limit: #{limit} }});
`

page << create_tab_using_ajax_response("Comments Index", after_render) do
%Q`
  // create file record
  var CommentRecord = new Ext.data.Record.create([
    {name: 'id', mapping: 'id'},
    {name: 'name', mapping: 'name'},
    {name: 'url', mapping: 'url'},
    {name: 'email', mapping: 'email'},
    {name: 'created_at', mapping: 'created_at'},
    {name: 'approved_at', mapping: 'approved_at'},
    {name: 'referrer_url', mapping: 'referrer_url'},
    {name: 'body', mapping: 'body'},
    {name: 'user_agent', mapping: 'user_agent'},
    {name: 'commentable_type', mapping: 'commentable_type'},
    {name: 'commentable_id', mapping: 'commentable_id'},
    {name: 'commentable_description', mapping: 'commentable_description'},
    {name: 'commentable_path', mapping: 'commentable_path'},
    {name: 'flaggings', mapping: 'flaggings'}
  ]);

  // data reader to parse the json response
  var reader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, CommentRecord);

  // set up connection of the data
  var connection = new Ext.data.Connection({url: #{@formatted_comments_path.to_json}, method: 'get'});

  var proxy = new Ext.data.HttpProxy(connection);

  // set up the data store and then send request to the server
  var ds = new Ext.data.Store({proxy: proxy, reader: reader, remoteSort: true, baseParams: {q: ''}});

  // define paging toolbar that is going to be appended to the footer of the grid panel
  var paging = new Ext.PagingToolbar({
    store: ds,
    pageSize: #{limit},
    displayInfo: true,
    displayMsg: 'Displaying {0} to {1} of {2}',
    emptyMsg: "No record to display",
    cls: "bottom-toolbar paging-toolbar-bottom",
    plugins: [new Ext.ux.PageSizePlugin]
  });
  
  #{create_grid_tbar_filter_field}
  
  #{create_grid_tbar_clear_button}
  
  var spamStore = new Ext.data.SimpleStore({
    fields: ['display', 'value'],
    data: [['Not spam', 'false'], ['Spam', 'true']]
  });
  
  var spamSelection = xl.widget.FormField({
    displayField: 'display', 
    valueField: 'value',
    hiddenName: 'spam',
    fieldLabel: 'View',
    value: 'false', 
    type: 'combobox', 
    store: spamStore, 
    editable : false,
    triggerAction: 'all',
    mode: 'local'
  });
  
  spamSelection.on('select', function(el, newValue, oldValue){
    ds.baseParams['spam'] = newValue.data.value;
    ds.reload({params: {start: 0, limit: ds.lastOptions.params.limit}});
    if(newValue.data.value == "true"){
      markAsHamAction.enable();
      markAsSpamAction.disable();
    }
    else{
      markAsHamAction.disable();
      markAsSpamAction.enable();
    }
  });

  var selectAllAction = new Ext.Action({
    text: "Select all",
    iconCls: "display_none"
  });

  var clearAllAction = new Ext.Action({
    text: "Clear all",
    iconCls: "display_none",
    disabled: true
  });
  
  var approveAction = new Ext.Action({
    text: "Approve",
    iconCls: "display_none",
    disabled: true
  });
    
  var unapproveAction = new Ext.Action({
    text: "Unapprove",
    iconCls: "display_none",
    disabled: true
  });
  
  var deleteAction = new Ext.Action({
    text: "Delete",
    iconCls: "display_none",
    disabled: true
  });
  
  var markAsHamCheckboxField = new Ext.form.Checkbox({
    fieldLabel: "Approve comment as well?",
    labelSeparator: " ",
    name: "approve"
  });
  
  var markAsHamFormPanel = new Ext.form.FormPanel({
    labelWidth: 150,
    items: [markAsHamCheckboxField]
  });

  var markAsHamWindow = new Ext.Window({
    title: "Mark as Not Spam",
    resizable: false,
    width: 300,
    height: 92,
    items: [markAsHamFormPanel],
    buttons:[
        {
          text: "OK",
          handler: function() {
              var records = grid.getSelectionModel().getSelections();
              var params = {};
              params['ids'] = getSelectedIdsString(records);
              markAsHamFormPanel.getForm().doAction("submit",
                {
                  url: #{mark_as_ham_comments_path().to_json},
                  method: "POST",
                  params: params
                }
              );
              if(markAsHamFormPanel.getForm().isValid()) {
                grid.enable();
                markAsHamWindow.hide();
                markAsHamWindow.close();
              }
            }
        },
        {
          text: 'Cancel',
          handler: function() { grid.enable(); markAsHamWindow.hide(); markAsHamWindow.close(); }
        }
      ]
  });

  var markAsHamAction = new Ext.Action({
    text: "Mark as Not Spam",
    iconCls: "display_none",
    disabled: true,
    handler: function() {
      grid.disable();
      markAsHamWindow.show();
    }
  });
  
  var markAsSpamAction = new Ext.Action({
    text: "Mark as Spam",
    iconCls: "display_none",
    disabled: false,
    handler: function() {
      var records = grid.getSelectionModel().getSelections();
      Ext.Msg.confirm("", "Mark selected comment(s) as spam?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        params['ids'] = getSelectedIdsString(records);
        new Ajax.Request(#{mark_as_spam_comments_path.to_json}, {
          method: 'post',
          parameters: params
        });
      }
    });
    }
  });
  
  var selectionMenu =  new Ext.menu.Menu({
    items: [selectAllAction, clearAllAction]
  });
  
  selectionMenu.addSeparator();
  selectionMenu.add(approveAction, unapproveAction, markAsHamAction, markAsSpamAction);
  selectionMenu.addSeparator();  
  selectionMenu.add(deleteAction);

  var gridTopToolbar = new Ext.Toolbar({
    cls: "top-toolbar",
    items: [
      {text: "&nbsp;&nbsp;&nbsp;Status:"}, 
      spamSelection,
      {text:"&nbsp;&nbsp;&nbsp;Filter: "}, 
      filterField, 
      clearButton,
      { text: "Actions", menu: selectionMenu }]
  });
  
  var editRenderer = function(value, cell, record) {
    return '<div class="icon_pencilGo pointerOnHover"/>';
  };
  
  var grid = new Ext.grid.GridPanel({
      store: ds,
      cm: new Ext.grid.ColumnModel([
          {id: "edit", width: 35, dataIndex: 'id', renderer: editRenderer, sortable: false, menuDisabled: true, hideable: false, tooltip: "Click here to go to full edit mode" },
          {id: "comment-name", width: 120, header: "Name", sortable: true, dataIndex: 'name', editor: new Ext.form.TextField()},
          {id: "comment-email", width: 120, header: "Email", sortable: true, dataIndex: 'email'},
          {id: "comment-body", width: 250, header: "Body", sortable: true, dataIndex: 'body'},
          {id: "comment-type", width: 50, header: "Type", sortable: true, dataIndex: 'commentable_type'},
          {id: "comment-description", width: 150, header: "For", sortable: true, dataIndex: 'commentable_description'},
          {id: "comment-url", width: 150, header: "URL", sortable: true, dataIndex: 'url'},
          {id: "comment-approved_at", header: "Approved at", sortable: true, dataIndex: 'approved_at'},
          {id: "comment-created_at", header: "Created at", sortable: true, dataIndex: 'created_at'},
          {id: "comment-referrer_url", width: 100, header: "Referrer url", hidden: true, sortable: true, dataIndex: 'referrer_url'},
          {id: "comment-user_agent", width: 100, header: "User agent", sortable: true, hidden: true, dataIndex: 'user_agent'},
          {id: "comment-flaggings", header: "Flaggings", hidden:true, sortable: true, dataIndex: 'flaggings'}
        ]),
      autoScroll: true,
      width: "100%",
      tbar: gridTopToolbar, 
      bbar: paging,
      selModel: new Ext.grid.RowSelectionModel,
      viewConfig: {autoFill: true, forceFit: true},
      autoExpandColumn: "comment-body",
      height: #{get_default_grid_height(nil)}-61,
      loadMask: true
  });
  
  grid.doNotSyncSize = true;
  Ext.EventManager.onWindowResize(function() {grid.setWidth(xl.centerPanel.getInnerWidth());});
  Ext.EventManager.onWindowResize(function() {grid.setHeight(xl.centerPanel.getInnerHeight());});
  
  xl.runningGrids.set("comments_index", grid);
  newPanel.on("destroy", function(){
    xl.runningGrids.unset("comments_index");
  });
  
  newPanel.add(grid);
  xl.viewport.render();
  
  var editCommentUrl = #{@edit_comment_path.to_json};
  // set double click action on grid cells
  grid.on("cellclick", function(gr, rowIndex, columnIndex, e) {
    var record = ds.getAt(rowIndex);
    var id = record.data.id;

    switch(columnIndex){
      case grid.getColumnModel().getIndexById("edit"):
        xl.openNewTabPanel('comments_edit_'+id, 
          editCommentUrl.sub("__ID__", id).sub("__COM_ID__", record.data.commentable_id).sub("__COM_TYPE__", record.data.commentable_type));
        break;
      default:
        break;
    }
  });
  grid.on("celldblclick", function(gr, rowIndex, columnIndex, e) {
    var record = ds.getAt(rowIndex);
    var id = record.data.id;

    switch(columnIndex){
      case grid.getColumnModel().getIndexById("comment-type"):
        if(record.data.commentable_path.length == 0){
          Ext.Msg.alert("Error", record.data.commentable_type + " has been deleted.");
        }else{
          xl.openNewTabPanel('blog_post_edit_'+record.data.commentable_id, record.data.commentable_path);
        }
        break;
      case grid.getColumnModel().getIndexById("comment-description"):
        if(record.data.commentable_path.length == 0){
          Ext.Msg.alert("Error", record.data.commentable_type + " has been deleted.");
        }else{
          xl.openNewTabPanel('blog_post_edit_'+record.data.commentable_id, record.data.commentable_path);
        }
        break;
      default:
        break;
    }
  });
  function alertNoPostsSelected() {
    Ext.Msg.alert('No comments Selected', 'Please select one or more comments to perform that action.');
  }

  function getSelectedIdsString(records){ 
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id);
    });
    return ids.toString();
  }
  
  clearAllAction.setHandler(function(e) {
    grid.getSelectionModel().clearSelections();
    e.disable();
  });

  selectAllAction.setHandler(function(e) {
    grid.getSelectionModel().selectAll();
    e.disable();
  });

  deleteAction.setHandler(function(e) {
    var records = grid.getSelectionModel().getSelections();
    if (records.length == 0) {
      alertNoPostsSelected();
      return false;
    }
    
    Ext.Msg.confirm("", "Delete selected comments permanently?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        var com_types = [];
        var com_ids = [];
        var ids = [];
        records.forEach(function(element, index){
          com_types.push(element.data.commentable_type);
          com_ids.push(element.data.commentable_id);
          ids.push(element.data.id);
        });
        grid.disable();
        params['commentable_types'] = com_types.join();
        params['commentable_ids'] = com_ids.join();
        params['ids'] = ids.join();
        new Ajax.Request("#{destroy_collection_comments_path}", {
          method: 'post',
          parameters: params,
          onSuccess: function(transport){
            grid.enable();
          }
        });
      }
    });
  });

  approveAction.setHandler(function(e) {
    var records = grid.getSelectionModel().getSelections();
    if (records.length == 0) {
      alertNoPostsSelected();
      return false;
    }
    
    Ext.Msg.confirm("", "Approved selected comments?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        var com_types = [];
        var com_ids = [];
        var ids = [];
        records.forEach(function(element, index){
          com_types.push(element.data.commentable_type);
          com_ids.push(element.data.commentable_id);
          ids.push(element.data.id);
        });
        grid.disable();
        params['commentable_types'] = com_types.join();
        params['commentable_ids'] = com_ids.join();
        params['ids'] = ids.join();
        new Ajax.Request("#{approve_collection_comments_path}", {
          method: 'post',
          parameters: params,
          onSuccess: function(transport){
            grid.enable();
          }
        });
      }
    });
  });

  unapproveAction.setHandler(function(e) {
    var records = grid.getSelectionModel().getSelections();
    if (records.length == 0) {
      alertNoPostsSelected();
      return false;
    }
    
    Ext.Msg.confirm("", "Unapproved selected comments?", function(btn){
      if ( btn.match(new RegExp("yes","i")) ) {
        var params = {};
        var com_types = [];
        var com_ids = [];
        var ids = [];
        records.forEach(function(element, index){
          com_types.push(element.data.commentable_type);
          com_ids.push(element.data.commentable_id);
          ids.push(element.data.id);
        });
        grid.disable();
        params['commentable_types'] = com_types.join();
        params['commentable_ids'] = com_ids.join();
        params['ids'] = ids.join();
        new Ajax.Request("#{unapprove_collection_comments_path}", {
          method: 'post',
          parameters: params,
          onSuccess: function(transport){
            grid.enable();
          }
        });
      }
    });
  });

  grid.getSelectionModel().on("selectionchange", function(){
    records = grid.getSelectionModel().getSelections();
    var ids = new Array();
    records.each( function(e) {
      ids.push(e.data.id);
    });
    
    if(ids.length>0){
      clearAllAction.enable();
      approveAction.enable();
      unapproveAction.enable();
      deleteAction.enable();
    }
    else {
      deleteAction.disable();
      approveAction.disable();
      unapproveAction.disable();
      selectAllAction.enable();
    }
  });
  
`
end