limit = params[:limit] || 50
account_module_subscriptions_url_json = formatted_account_module_subscriptions_path(:format => :json).to_json

page << create_tab_using_ajax_response("[XL] Subscriptions") do
%Q`
  var installNewSuiteButton = new Ext.Toolbar.Button({
    text:"Install New Suite",
    handler: function(btn, event){
      xl.openNewTabPanel('suites_install_nil', #{install_suites_path.to_json});
    }
  });

  // create file record
  var AccountModuleSubscriptionRecord = new Ext.data.Record.create([
    {name: 'id', mapping: 'id'},
    {name: 'subscription_fee', mapping: 'subscription_fee'},
    {name: 'setup_fee', mapping: 'setup_fee'},
    {name: 'status', mapping: 'status'},
    {name: 'installed_template_id', mapping: 'installed_template_id'},
    {name: 'installed_template_name', mapping: 'installed_template_name'},
    {name: 'installed_template_domain_patterns', mapping: 'installed_template_domain_patterns'},
    {name: 'installed_template_updated_at', mapping: 'installed_template_updated_at'},
    {name: 'installed_account_modules', mapping: 'installed_account_modules'},
    {name: 'created_on', mapping: 'created_on'}
  ]);
  
  // data reader to parse the json response
  var reader = new Ext.data.JsonReader({totalProperty: "total", root: "collection", id: "id"}, AccountModuleSubscriptionRecord);

  // set up connection of the data
  var connection = new Ext.data.Connection({url: #{account_module_subscriptions_url_json}, method: 'get'});
  var proxy = new Ext.data.HttpProxy(connection);

  // set up the data store and then send request to the server
  var ds = new Ext.data.Store({proxy: proxy, reader: reader, remoteSort: true, baseParams: {q: ''}});

  // set up the ext grid object
  var xg = Ext.grid;

  var editInstalledAccountTemplateUrl = #{edit_installed_account_template_path(:id => "__ID__").to_json};
  var updateSuiteAction = new Ext.Action({
    text: "Update suite",
    iconCls: "display_none",
    disabled: true,
    handler: function(){
      xl.openNewTabPanel('installed_account_templates_edit_'+id, editInstalledAccountTemplateUrl.sub("__ID__", selectedInstalledAccountTemplateIds[0]));
    }
  });

  var editAccountModuleSubscriptionUrl = #{edit_account_module_subscription_path(:id => "__ID__").to_json};
  var paySubscriptionAction = new Ext.Action({
    text: "Pay subscription",
    iconCls: "display_none",
    disabled: true,
    handler: function(){
      xl.openNewTabPanel('account_module_subscriptions_edit_'+id, editAccountModuleSubscriptionUrl.sub("__ID__", selectedIds[0]));
    }
  });

  var selectionMenu =  new Ext.menu.Menu({
    items: [updateSuiteAction, paySubscriptionAction]
  });  
  
  var gridTopToolbar = new Ext.Toolbar({
    cls:"top-toolbar",
    items:[
      {text:"New", handler:function(){xl.openNewTabPanel('account_module_subscriptions_new_nil', #{new_account_module_subscription_path.to_json})}}
      ,{text:"Actions", menu:selectionMenu }
    ]
  });

  var grid = new Ext.grid.GridPanel({
    store: ds,
    cm: new Ext.grid.ColumnModel([
        {id: "created_on", width: 100, header: "Created on", dataIndex: 'created_on', hidden: true},
        {id: "setup_fee", width: 80, header: "Setup Fee", dataIndex: 'setup_fee'},
        {id: "subscription_fee", width: 90, header: "Subscription Fee", dataIndex: 'subscription_fee'},
        {id: "status", width: 85, header: "Payment status", dataIndex: 'status'},
        {id: "installed_template_name", width: 125, header: "Suite Name", dataIndex: 'installed_template_name'},
        {id: "installed_template_updated_at", width: 125, header: "Last suite update", dataIndex: 'installed_template_updated_at'},
        {id: "installed_account_modules", header: "Modules", dataIndex: 'installed_account_modules'},
        {id: "installed_template_domain_patterns", width: 100, header: "Suite domain patterns", dataIndex: 'installed_template_domain_patterns', hidden: true}        
      ]),
    autoScroll: true,
    autoWidth: true,
    //height: #{get_default_grid_height(nil)},
    selModel: new Ext.grid.RowSelectionModel,
    autoExpandColumn: "installed_account_modules",
    loadMask: true,
    tbar: gridTopToolbar,
    listeners:  {
      render: function(gr){
        ds.load({params: {start: 0, limit: #{limit} }});
        xl.fitToOwnerCt(grid);
      }
    }
  });
  
  newPanel.add(grid);
  xl.runningGrids.set("account_module_subscriptions", grid);
  newPanel.on("destroy", function(){
    xl.runningGrids.unset("account_module_subscriptions");
  });
  
  // set double click action on grid cells
  grid.on("rowdblclick", function(gr, rowIndex, e) {
    var record = ds.getAt(rowIndex);
    var id = record.data.id;
    xl.openNewTabPanel('account_module_subscriptions_edit_'+id, editAccountModuleSubscriptionUrl.sub("__ID__", id));
  });
  
  var selectedInstalledAccountTemplateIds = null;
  var selectedIds = null;
  
  grid.getSelectionModel().on("selectionchange", function(){
    records = grid.getSelectionModel().getSelections();
    var ids = new Array();
    var accountTemplateIds = new Array();
    records.each( function(e) {
      ids.push(e.data.id);
      accountTemplateIds.push(e.data.installed_template_id);
    });
    selectedIds = ids;
    selectedInstalledAccountTemplateIds = accountTemplateIds;
    
    if(ids.length==1){
      updateSuiteAction.enable();
      paySubscriptionAction.enable();
    }
    else {
      updateSuiteAction.disable();
      paySubscriptionAction.disable();
    }
  });  
`
end
